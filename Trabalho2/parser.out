Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> operations
Rule 2     atrib -> ID IGUAL expr
Rule 3     IN -> Input LP ID RP
Rule 4     PRINT -> Write LP TEXTO RP
Rule 5     TEXTO -> ID
Rule 6     TEXTO -> PRE ind PRD ID
Rule 7     TEXTO -> TEXT
Rule 8     decl -> ID IGUAL INT NINTdec
Rule 9     NINTdec -> NINT
Rule 10    NINTdec -> <empty>
Rule 11    decl -> ID IGUAL LISTA list_nint
Rule 12    list_nint -> NINT
Rule 13    list_nint -> list_nint VIRG NINT
Rule 14    expr -> expr PLUS expr
Rule 15    expr -> expr MINUS expr
Rule 16    expr -> expr MUL expr
Rule 17    expr -> expr DIV expr
Rule 18    expr -> expr MOD expr
Rule 19    expr -> NINT
Rule 20    expr -> PRE indecl PRD ID
Rule 21    atrib -> PRE indecl PRD ID IGUAL expr
Rule 22    indecl -> ID
Rule 23    ind -> NINT
Rule 24    ind -> ID
Rule 25    expr -> ID
Rule 26    expr -> LP expr RP
Rule 27    exprl -> expr BIG expr
Rule 28    exprl -> expr SMALL expr
Rule 29    exprl -> expr BIGEQ expr
Rule 30    exprl -> expr SMALLEQ expr
Rule 31    exprl -> expr EQ expr
Rule 32    exprl -> exprl AND exprl
Rule 33    exprl -> exprl OR exprl
Rule 34    operations -> operations NEWLINE operation
Rule 35    operations -> operation
Rule 36    operation -> IN
Rule 37    operation -> PRINT
Rule 38    operation -> atrib
Rule 39    operation -> exprl
Rule 40    operation -> expr
Rule 41    operation -> if_ifnot
Rule 42    operation -> decl
Rule 43    operation -> if_then
Rule 44    operation -> for
Rule 45    if_ifnot -> IF exprl THEN operations ELSE operations
Rule 46    if_then -> IF exprl THEN operations
Rule 47    for -> FOR exprl DO operations

Terminals, with rules where they appear

AND                  : 32
BIG                  : 27
BIGEQ                : 29
DIV                  : 17
DO                   : 47
ELSE                 : 45
EQ                   : 31
FOR                  : 47
ID                   : 2 3 5 6 8 11 20 21 22 24 25
IF                   : 45 46
IGUAL                : 2 8 11 21
INT                  : 8
Input                : 3
LISTA                : 11
LP                   : 3 4 26
MINUS                : 15
MOD                  : 18
MUL                  : 16
NEWLINE              : 34
NINT                 : 9 12 13 19 23
OR                   : 33
PLUS                 : 14
PRD                  : 6 20 21
PRE                  : 6 20 21
RP                   : 3 4 26
SMALL                : 28
SMALLEQ              : 30
TEXT                 : 7
THEN                 : 45 46
VIRG                 : 13
Write                : 4
error                : 

Nonterminals, with rules where they appear

IN                   : 36
NINTdec              : 8
PRINT                : 37
TEXTO                : 4
atrib                : 38
decl                 : 42
expr                 : 2 14 14 15 15 16 16 17 17 18 18 21 26 27 27 28 28 29 29 30 30 31 31 40
exprl                : 32 32 33 33 39 45 46 47
for                  : 44
if_ifnot             : 41
if_then              : 43
ind                  : 6
indecl               : 20 21
list_nint            : 11 13
operation            : 34 35
operations           : 1 34 45 45 46 47
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . operations
    (34) operations -> . operations NEWLINE operation
    (35) operations -> . operation
    (36) operation -> . IN
    (37) operation -> . PRINT
    (38) operation -> . atrib
    (39) operation -> . exprl
    (40) operation -> . expr
    (41) operation -> . if_ifnot
    (42) operation -> . decl
    (43) operation -> . if_then
    (44) operation -> . for
    (3) IN -> . Input LP ID RP
    (4) PRINT -> . Write LP TEXTO RP
    (2) atrib -> . ID IGUAL expr
    (21) atrib -> . PRE indecl PRD ID IGUAL expr
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP
    (45) if_ifnot -> . IF exprl THEN operations ELSE operations
    (8) decl -> . ID IGUAL INT NINTdec
    (11) decl -> . ID IGUAL LISTA list_nint
    (46) if_then -> . IF exprl THEN operations
    (47) for -> . FOR exprl DO operations

    Input           shift and go to state 13
    Write           shift and go to state 16
    ID              shift and go to state 15
    PRE             shift and go to state 17
    NINT            shift and go to state 18
    LP              shift and go to state 14
    IF              shift and go to state 19
    FOR             shift and go to state 20

    start                          shift and go to state 1
    operations                     shift and go to state 2
    operation                      shift and go to state 3
    IN                             shift and go to state 4
    PRINT                          shift and go to state 5
    atrib                          shift and go to state 6
    exprl                          shift and go to state 7
    expr                           shift and go to state 8
    if_ifnot                       shift and go to state 9
    decl                           shift and go to state 10
    if_then                        shift and go to state 11
    for                            shift and go to state 12

state 1

    (0) S' -> start .



state 2

    (1) start -> operations .
    (34) operations -> operations . NEWLINE operation

    $end            reduce using rule 1 (start -> operations .)
    NEWLINE         shift and go to state 21


state 3

    (35) operations -> operation .

    NEWLINE         reduce using rule 35 (operations -> operation .)
    $end            reduce using rule 35 (operations -> operation .)
    ELSE            reduce using rule 35 (operations -> operation .)


state 4

    (36) operation -> IN .

    NEWLINE         reduce using rule 36 (operation -> IN .)
    $end            reduce using rule 36 (operation -> IN .)
    ELSE            reduce using rule 36 (operation -> IN .)


state 5

    (37) operation -> PRINT .

    NEWLINE         reduce using rule 37 (operation -> PRINT .)
    $end            reduce using rule 37 (operation -> PRINT .)
    ELSE            reduce using rule 37 (operation -> PRINT .)


state 6

    (38) operation -> atrib .

    NEWLINE         reduce using rule 38 (operation -> atrib .)
    $end            reduce using rule 38 (operation -> atrib .)
    ELSE            reduce using rule 38 (operation -> atrib .)


state 7

    (39) operation -> exprl .
    (32) exprl -> exprl . AND exprl
    (33) exprl -> exprl . OR exprl

    NEWLINE         reduce using rule 39 (operation -> exprl .)
    $end            reduce using rule 39 (operation -> exprl .)
    ELSE            reduce using rule 39 (operation -> exprl .)
    AND             shift and go to state 22
    OR              shift and go to state 23


state 8

    (40) operation -> expr .
    (27) exprl -> expr . BIG expr
    (28) exprl -> expr . SMALL expr
    (29) exprl -> expr . BIGEQ expr
    (30) exprl -> expr . SMALLEQ expr
    (31) exprl -> expr . EQ expr
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    NEWLINE         reduce using rule 40 (operation -> expr .)
    $end            reduce using rule 40 (operation -> expr .)
    ELSE            reduce using rule 40 (operation -> expr .)
    BIG             shift and go to state 24
    SMALL           shift and go to state 25
    BIGEQ           shift and go to state 26
    SMALLEQ         shift and go to state 27
    EQ              shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 9

    (41) operation -> if_ifnot .

    NEWLINE         reduce using rule 41 (operation -> if_ifnot .)
    $end            reduce using rule 41 (operation -> if_ifnot .)
    ELSE            reduce using rule 41 (operation -> if_ifnot .)


state 10

    (42) operation -> decl .

    NEWLINE         reduce using rule 42 (operation -> decl .)
    $end            reduce using rule 42 (operation -> decl .)
    ELSE            reduce using rule 42 (operation -> decl .)


state 11

    (43) operation -> if_then .

    NEWLINE         reduce using rule 43 (operation -> if_then .)
    $end            reduce using rule 43 (operation -> if_then .)
    ELSE            reduce using rule 43 (operation -> if_then .)


state 12

    (44) operation -> for .

    NEWLINE         reduce using rule 44 (operation -> for .)
    $end            reduce using rule 44 (operation -> for .)
    ELSE            reduce using rule 44 (operation -> for .)


state 13

    (3) IN -> Input . LP ID RP

    LP              shift and go to state 34


state 14

    (26) expr -> LP . expr RP
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 35

state 15

    (2) atrib -> ID . IGUAL expr
    (25) expr -> ID .
    (8) decl -> ID . IGUAL INT NINTdec
    (11) decl -> ID . IGUAL LISTA list_nint

    IGUAL           shift and go to state 38
    BIG             reduce using rule 25 (expr -> ID .)
    SMALL           reduce using rule 25 (expr -> ID .)
    BIGEQ           reduce using rule 25 (expr -> ID .)
    SMALLEQ         reduce using rule 25 (expr -> ID .)
    EQ              reduce using rule 25 (expr -> ID .)
    PLUS            reduce using rule 25 (expr -> ID .)
    MINUS           reduce using rule 25 (expr -> ID .)
    MUL             reduce using rule 25 (expr -> ID .)
    DIV             reduce using rule 25 (expr -> ID .)
    MOD             reduce using rule 25 (expr -> ID .)
    NEWLINE         reduce using rule 25 (expr -> ID .)
    $end            reduce using rule 25 (expr -> ID .)
    ELSE            reduce using rule 25 (expr -> ID .)


state 16

    (4) PRINT -> Write . LP TEXTO RP

    LP              shift and go to state 39


state 17

    (21) atrib -> PRE . indecl PRD ID IGUAL expr
    (20) expr -> PRE . indecl PRD ID
    (22) indecl -> . ID

    ID              shift and go to state 41

    indecl                         shift and go to state 40

state 18

    (19) expr -> NINT .

    BIG             reduce using rule 19 (expr -> NINT .)
    SMALL           reduce using rule 19 (expr -> NINT .)
    BIGEQ           reduce using rule 19 (expr -> NINT .)
    SMALLEQ         reduce using rule 19 (expr -> NINT .)
    EQ              reduce using rule 19 (expr -> NINT .)
    PLUS            reduce using rule 19 (expr -> NINT .)
    MINUS           reduce using rule 19 (expr -> NINT .)
    MUL             reduce using rule 19 (expr -> NINT .)
    DIV             reduce using rule 19 (expr -> NINT .)
    MOD             reduce using rule 19 (expr -> NINT .)
    NEWLINE         reduce using rule 19 (expr -> NINT .)
    $end            reduce using rule 19 (expr -> NINT .)
    RP              reduce using rule 19 (expr -> NINT .)
    ELSE            reduce using rule 19 (expr -> NINT .)
    AND             reduce using rule 19 (expr -> NINT .)
    OR              reduce using rule 19 (expr -> NINT .)
    THEN            reduce using rule 19 (expr -> NINT .)
    DO              reduce using rule 19 (expr -> NINT .)


state 19

    (45) if_ifnot -> IF . exprl THEN operations ELSE operations
    (46) if_then -> IF . exprl THEN operations
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    exprl                          shift and go to state 42
    expr                           shift and go to state 43

state 20

    (47) for -> FOR . exprl DO operations
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    exprl                          shift and go to state 44
    expr                           shift and go to state 43

state 21

    (34) operations -> operations NEWLINE . operation
    (36) operation -> . IN
    (37) operation -> . PRINT
    (38) operation -> . atrib
    (39) operation -> . exprl
    (40) operation -> . expr
    (41) operation -> . if_ifnot
    (42) operation -> . decl
    (43) operation -> . if_then
    (44) operation -> . for
    (3) IN -> . Input LP ID RP
    (4) PRINT -> . Write LP TEXTO RP
    (2) atrib -> . ID IGUAL expr
    (21) atrib -> . PRE indecl PRD ID IGUAL expr
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP
    (45) if_ifnot -> . IF exprl THEN operations ELSE operations
    (8) decl -> . ID IGUAL INT NINTdec
    (11) decl -> . ID IGUAL LISTA list_nint
    (46) if_then -> . IF exprl THEN operations
    (47) for -> . FOR exprl DO operations

    Input           shift and go to state 13
    Write           shift and go to state 16
    ID              shift and go to state 15
    PRE             shift and go to state 17
    NINT            shift and go to state 18
    LP              shift and go to state 14
    IF              shift and go to state 19
    FOR             shift and go to state 20

    operation                      shift and go to state 45
    IN                             shift and go to state 4
    PRINT                          shift and go to state 5
    atrib                          shift and go to state 6
    exprl                          shift and go to state 7
    expr                           shift and go to state 8
    if_ifnot                       shift and go to state 9
    decl                           shift and go to state 10
    if_then                        shift and go to state 11
    for                            shift and go to state 12

state 22

    (32) exprl -> exprl AND . exprl
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    exprl                          shift and go to state 46
    expr                           shift and go to state 43

state 23

    (33) exprl -> exprl OR . exprl
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    exprl                          shift and go to state 47
    expr                           shift and go to state 43

state 24

    (27) exprl -> expr BIG . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 48

state 25

    (28) exprl -> expr SMALL . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 49

state 26

    (29) exprl -> expr BIGEQ . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 50

state 27

    (30) exprl -> expr SMALLEQ . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 51

state 28

    (31) exprl -> expr EQ . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 52

state 29

    (14) expr -> expr PLUS . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 53

state 30

    (15) expr -> expr MINUS . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 54

state 31

    (16) expr -> expr MUL . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 55

state 32

    (17) expr -> expr DIV . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 56

state 33

    (18) expr -> expr MOD . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 57

state 34

    (3) IN -> Input LP . ID RP

    ID              shift and go to state 58


state 35

    (26) expr -> LP expr . RP
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    RP              shift and go to state 59
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 36

    (20) expr -> PRE . indecl PRD ID
    (22) indecl -> . ID

    ID              shift and go to state 41

    indecl                         shift and go to state 60

state 37

    (25) expr -> ID .

    RP              reduce using rule 25 (expr -> ID .)
    PLUS            reduce using rule 25 (expr -> ID .)
    MINUS           reduce using rule 25 (expr -> ID .)
    MUL             reduce using rule 25 (expr -> ID .)
    DIV             reduce using rule 25 (expr -> ID .)
    MOD             reduce using rule 25 (expr -> ID .)
    BIG             reduce using rule 25 (expr -> ID .)
    SMALL           reduce using rule 25 (expr -> ID .)
    BIGEQ           reduce using rule 25 (expr -> ID .)
    SMALLEQ         reduce using rule 25 (expr -> ID .)
    EQ              reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)
    NEWLINE         reduce using rule 25 (expr -> ID .)
    $end            reduce using rule 25 (expr -> ID .)
    THEN            reduce using rule 25 (expr -> ID .)
    DO              reduce using rule 25 (expr -> ID .)
    ELSE            reduce using rule 25 (expr -> ID .)


state 38

    (2) atrib -> ID IGUAL . expr
    (8) decl -> ID IGUAL . INT NINTdec
    (11) decl -> ID IGUAL . LISTA list_nint
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    INT             shift and go to state 62
    LISTA           shift and go to state 63
    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 61

state 39

    (4) PRINT -> Write LP . TEXTO RP
    (5) TEXTO -> . ID
    (6) TEXTO -> . PRE ind PRD ID
    (7) TEXTO -> . TEXT

    ID              shift and go to state 65
    PRE             shift and go to state 66
    TEXT            shift and go to state 67

    TEXTO                          shift and go to state 64

state 40

    (21) atrib -> PRE indecl . PRD ID IGUAL expr
    (20) expr -> PRE indecl . PRD ID

    PRD             shift and go to state 68


state 41

    (22) indecl -> ID .

    PRD             reduce using rule 22 (indecl -> ID .)


state 42

    (45) if_ifnot -> IF exprl . THEN operations ELSE operations
    (46) if_then -> IF exprl . THEN operations
    (32) exprl -> exprl . AND exprl
    (33) exprl -> exprl . OR exprl

    THEN            shift and go to state 69
    AND             shift and go to state 22
    OR              shift and go to state 23


state 43

    (27) exprl -> expr . BIG expr
    (28) exprl -> expr . SMALL expr
    (29) exprl -> expr . BIGEQ expr
    (30) exprl -> expr . SMALLEQ expr
    (31) exprl -> expr . EQ expr
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    BIG             shift and go to state 24
    SMALL           shift and go to state 25
    BIGEQ           shift and go to state 26
    SMALLEQ         shift and go to state 27
    EQ              shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 44

    (47) for -> FOR exprl . DO operations
    (32) exprl -> exprl . AND exprl
    (33) exprl -> exprl . OR exprl

    DO              shift and go to state 70
    AND             shift and go to state 22
    OR              shift and go to state 23


state 45

    (34) operations -> operations NEWLINE operation .

    NEWLINE         reduce using rule 34 (operations -> operations NEWLINE operation .)
    $end            reduce using rule 34 (operations -> operations NEWLINE operation .)
    ELSE            reduce using rule 34 (operations -> operations NEWLINE operation .)


state 46

    (32) exprl -> exprl AND exprl .
    (32) exprl -> exprl . AND exprl
    (33) exprl -> exprl . OR exprl

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    NEWLINE         reduce using rule 32 (exprl -> exprl AND exprl .)
    $end            reduce using rule 32 (exprl -> exprl AND exprl .)
    THEN            reduce using rule 32 (exprl -> exprl AND exprl .)
    DO              reduce using rule 32 (exprl -> exprl AND exprl .)
    ELSE            reduce using rule 32 (exprl -> exprl AND exprl .)
    AND             shift and go to state 22
    OR              shift and go to state 23

  ! AND             [ reduce using rule 32 (exprl -> exprl AND exprl .) ]
  ! OR              [ reduce using rule 32 (exprl -> exprl AND exprl .) ]


state 47

    (33) exprl -> exprl OR exprl .
    (32) exprl -> exprl . AND exprl
    (33) exprl -> exprl . OR exprl

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    NEWLINE         reduce using rule 33 (exprl -> exprl OR exprl .)
    $end            reduce using rule 33 (exprl -> exprl OR exprl .)
    THEN            reduce using rule 33 (exprl -> exprl OR exprl .)
    DO              reduce using rule 33 (exprl -> exprl OR exprl .)
    ELSE            reduce using rule 33 (exprl -> exprl OR exprl .)
    AND             shift and go to state 22
    OR              shift and go to state 23

  ! AND             [ reduce using rule 33 (exprl -> exprl OR exprl .) ]
  ! OR              [ reduce using rule 33 (exprl -> exprl OR exprl .) ]


state 48

    (27) exprl -> expr BIG expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    AND             reduce using rule 27 (exprl -> expr BIG expr .)
    OR              reduce using rule 27 (exprl -> expr BIG expr .)
    NEWLINE         reduce using rule 27 (exprl -> expr BIG expr .)
    $end            reduce using rule 27 (exprl -> expr BIG expr .)
    THEN            reduce using rule 27 (exprl -> expr BIG expr .)
    DO              reduce using rule 27 (exprl -> expr BIG expr .)
    ELSE            reduce using rule 27 (exprl -> expr BIG expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 49

    (28) exprl -> expr SMALL expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    AND             reduce using rule 28 (exprl -> expr SMALL expr .)
    OR              reduce using rule 28 (exprl -> expr SMALL expr .)
    NEWLINE         reduce using rule 28 (exprl -> expr SMALL expr .)
    $end            reduce using rule 28 (exprl -> expr SMALL expr .)
    THEN            reduce using rule 28 (exprl -> expr SMALL expr .)
    DO              reduce using rule 28 (exprl -> expr SMALL expr .)
    ELSE            reduce using rule 28 (exprl -> expr SMALL expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 50

    (29) exprl -> expr BIGEQ expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    AND             reduce using rule 29 (exprl -> expr BIGEQ expr .)
    OR              reduce using rule 29 (exprl -> expr BIGEQ expr .)
    NEWLINE         reduce using rule 29 (exprl -> expr BIGEQ expr .)
    $end            reduce using rule 29 (exprl -> expr BIGEQ expr .)
    THEN            reduce using rule 29 (exprl -> expr BIGEQ expr .)
    DO              reduce using rule 29 (exprl -> expr BIGEQ expr .)
    ELSE            reduce using rule 29 (exprl -> expr BIGEQ expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 51

    (30) exprl -> expr SMALLEQ expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    AND             reduce using rule 30 (exprl -> expr SMALLEQ expr .)
    OR              reduce using rule 30 (exprl -> expr SMALLEQ expr .)
    NEWLINE         reduce using rule 30 (exprl -> expr SMALLEQ expr .)
    $end            reduce using rule 30 (exprl -> expr SMALLEQ expr .)
    THEN            reduce using rule 30 (exprl -> expr SMALLEQ expr .)
    DO              reduce using rule 30 (exprl -> expr SMALLEQ expr .)
    ELSE            reduce using rule 30 (exprl -> expr SMALLEQ expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 52

    (31) exprl -> expr EQ expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    AND             reduce using rule 31 (exprl -> expr EQ expr .)
    OR              reduce using rule 31 (exprl -> expr EQ expr .)
    NEWLINE         reduce using rule 31 (exprl -> expr EQ expr .)
    $end            reduce using rule 31 (exprl -> expr EQ expr .)
    THEN            reduce using rule 31 (exprl -> expr EQ expr .)
    DO              reduce using rule 31 (exprl -> expr EQ expr .)
    ELSE            reduce using rule 31 (exprl -> expr EQ expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 53

    (14) expr -> expr PLUS expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    BIG             reduce using rule 14 (expr -> expr PLUS expr .)
    SMALL           reduce using rule 14 (expr -> expr PLUS expr .)
    BIGEQ           reduce using rule 14 (expr -> expr PLUS expr .)
    SMALLEQ         reduce using rule 14 (expr -> expr PLUS expr .)
    EQ              reduce using rule 14 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 14 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 14 (expr -> expr PLUS expr .)
    MOD             reduce using rule 14 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 14 (expr -> expr PLUS expr .)
    $end            reduce using rule 14 (expr -> expr PLUS expr .)
    RP              reduce using rule 14 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 14 (expr -> expr PLUS expr .)
    AND             reduce using rule 14 (expr -> expr PLUS expr .)
    OR              reduce using rule 14 (expr -> expr PLUS expr .)
    THEN            reduce using rule 14 (expr -> expr PLUS expr .)
    DO              reduce using rule 14 (expr -> expr PLUS expr .)
    MUL             shift and go to state 31
    DIV             shift and go to state 32

  ! MUL             [ reduce using rule 14 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 14 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! MOD             [ shift and go to state 33 ]


state 54

    (15) expr -> expr MINUS expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    BIG             reduce using rule 15 (expr -> expr MINUS expr .)
    SMALL           reduce using rule 15 (expr -> expr MINUS expr .)
    BIGEQ           reduce using rule 15 (expr -> expr MINUS expr .)
    SMALLEQ         reduce using rule 15 (expr -> expr MINUS expr .)
    EQ              reduce using rule 15 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 15 (expr -> expr MINUS expr .)
    $end            reduce using rule 15 (expr -> expr MINUS expr .)
    RP              reduce using rule 15 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 15 (expr -> expr MINUS expr .)
    AND             reduce using rule 15 (expr -> expr MINUS expr .)
    OR              reduce using rule 15 (expr -> expr MINUS expr .)
    THEN            reduce using rule 15 (expr -> expr MINUS expr .)
    DO              reduce using rule 15 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33

  ! PLUS            [ reduce using rule 15 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr MINUS expr .) ]
  ! MUL             [ reduce using rule 15 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 15 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 15 (expr -> expr MINUS expr .) ]


state 55

    (16) expr -> expr MUL expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    BIG             reduce using rule 16 (expr -> expr MUL expr .)
    SMALL           reduce using rule 16 (expr -> expr MUL expr .)
    BIGEQ           reduce using rule 16 (expr -> expr MUL expr .)
    SMALLEQ         reduce using rule 16 (expr -> expr MUL expr .)
    EQ              reduce using rule 16 (expr -> expr MUL expr .)
    PLUS            reduce using rule 16 (expr -> expr MUL expr .)
    MINUS           reduce using rule 16 (expr -> expr MUL expr .)
    MUL             reduce using rule 16 (expr -> expr MUL expr .)
    DIV             reduce using rule 16 (expr -> expr MUL expr .)
    MOD             reduce using rule 16 (expr -> expr MUL expr .)
    NEWLINE         reduce using rule 16 (expr -> expr MUL expr .)
    $end            reduce using rule 16 (expr -> expr MUL expr .)
    RP              reduce using rule 16 (expr -> expr MUL expr .)
    ELSE            reduce using rule 16 (expr -> expr MUL expr .)
    AND             reduce using rule 16 (expr -> expr MUL expr .)
    OR              reduce using rule 16 (expr -> expr MUL expr .)
    THEN            reduce using rule 16 (expr -> expr MUL expr .)
    DO              reduce using rule 16 (expr -> expr MUL expr .)

  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! MUL             [ shift and go to state 31 ]
  ! DIV             [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 33 ]


state 56

    (17) expr -> expr DIV expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    BIG             reduce using rule 17 (expr -> expr DIV expr .)
    SMALL           reduce using rule 17 (expr -> expr DIV expr .)
    BIGEQ           reduce using rule 17 (expr -> expr DIV expr .)
    SMALLEQ         reduce using rule 17 (expr -> expr DIV expr .)
    EQ              reduce using rule 17 (expr -> expr DIV expr .)
    PLUS            reduce using rule 17 (expr -> expr DIV expr .)
    MINUS           reduce using rule 17 (expr -> expr DIV expr .)
    MUL             reduce using rule 17 (expr -> expr DIV expr .)
    DIV             reduce using rule 17 (expr -> expr DIV expr .)
    MOD             reduce using rule 17 (expr -> expr DIV expr .)
    NEWLINE         reduce using rule 17 (expr -> expr DIV expr .)
    $end            reduce using rule 17 (expr -> expr DIV expr .)
    RP              reduce using rule 17 (expr -> expr DIV expr .)
    ELSE            reduce using rule 17 (expr -> expr DIV expr .)
    AND             reduce using rule 17 (expr -> expr DIV expr .)
    OR              reduce using rule 17 (expr -> expr DIV expr .)
    THEN            reduce using rule 17 (expr -> expr DIV expr .)
    DO              reduce using rule 17 (expr -> expr DIV expr .)

  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! MUL             [ shift and go to state 31 ]
  ! DIV             [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 33 ]


state 57

    (18) expr -> expr MOD expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    BIG             reduce using rule 18 (expr -> expr MOD expr .)
    SMALL           reduce using rule 18 (expr -> expr MOD expr .)
    BIGEQ           reduce using rule 18 (expr -> expr MOD expr .)
    SMALLEQ         reduce using rule 18 (expr -> expr MOD expr .)
    EQ              reduce using rule 18 (expr -> expr MOD expr .)
    NEWLINE         reduce using rule 18 (expr -> expr MOD expr .)
    $end            reduce using rule 18 (expr -> expr MOD expr .)
    RP              reduce using rule 18 (expr -> expr MOD expr .)
    ELSE            reduce using rule 18 (expr -> expr MOD expr .)
    AND             reduce using rule 18 (expr -> expr MOD expr .)
    OR              reduce using rule 18 (expr -> expr MOD expr .)
    THEN            reduce using rule 18 (expr -> expr MOD expr .)
    DO              reduce using rule 18 (expr -> expr MOD expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33

  ! PLUS            [ reduce using rule 18 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr MOD expr .) ]
  ! MUL             [ reduce using rule 18 (expr -> expr MOD expr .) ]
  ! DIV             [ reduce using rule 18 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 18 (expr -> expr MOD expr .) ]


state 58

    (3) IN -> Input LP ID . RP

    RP              shift and go to state 71


state 59

    (26) expr -> LP expr RP .

    BIG             reduce using rule 26 (expr -> LP expr RP .)
    SMALL           reduce using rule 26 (expr -> LP expr RP .)
    BIGEQ           reduce using rule 26 (expr -> LP expr RP .)
    SMALLEQ         reduce using rule 26 (expr -> LP expr RP .)
    EQ              reduce using rule 26 (expr -> LP expr RP .)
    PLUS            reduce using rule 26 (expr -> LP expr RP .)
    MINUS           reduce using rule 26 (expr -> LP expr RP .)
    MUL             reduce using rule 26 (expr -> LP expr RP .)
    DIV             reduce using rule 26 (expr -> LP expr RP .)
    MOD             reduce using rule 26 (expr -> LP expr RP .)
    NEWLINE         reduce using rule 26 (expr -> LP expr RP .)
    $end            reduce using rule 26 (expr -> LP expr RP .)
    RP              reduce using rule 26 (expr -> LP expr RP .)
    ELSE            reduce using rule 26 (expr -> LP expr RP .)
    AND             reduce using rule 26 (expr -> LP expr RP .)
    OR              reduce using rule 26 (expr -> LP expr RP .)
    THEN            reduce using rule 26 (expr -> LP expr RP .)
    DO              reduce using rule 26 (expr -> LP expr RP .)


state 60

    (20) expr -> PRE indecl . PRD ID

    PRD             shift and go to state 72


state 61

    (2) atrib -> ID IGUAL expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    NEWLINE         reduce using rule 2 (atrib -> ID IGUAL expr .)
    $end            reduce using rule 2 (atrib -> ID IGUAL expr .)
    ELSE            reduce using rule 2 (atrib -> ID IGUAL expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 62

    (8) decl -> ID IGUAL INT . NINTdec
    (9) NINTdec -> . NINT
    (10) NINTdec -> .

    NINT            shift and go to state 74
    NEWLINE         reduce using rule 10 (NINTdec -> .)
    $end            reduce using rule 10 (NINTdec -> .)
    ELSE            reduce using rule 10 (NINTdec -> .)

    NINTdec                        shift and go to state 73

state 63

    (11) decl -> ID IGUAL LISTA . list_nint
    (12) list_nint -> . NINT
    (13) list_nint -> . list_nint VIRG NINT

    NINT            shift and go to state 76

    list_nint                      shift and go to state 75

state 64

    (4) PRINT -> Write LP TEXTO . RP

    RP              shift and go to state 77


state 65

    (5) TEXTO -> ID .

    RP              reduce using rule 5 (TEXTO -> ID .)


state 66

    (6) TEXTO -> PRE . ind PRD ID
    (23) ind -> . NINT
    (24) ind -> . ID

    NINT            shift and go to state 80
    ID              shift and go to state 79

    ind                            shift and go to state 78

state 67

    (7) TEXTO -> TEXT .

    RP              reduce using rule 7 (TEXTO -> TEXT .)


state 68

    (21) atrib -> PRE indecl PRD . ID IGUAL expr
    (20) expr -> PRE indecl PRD . ID

    ID              shift and go to state 81


state 69

    (45) if_ifnot -> IF exprl THEN . operations ELSE operations
    (46) if_then -> IF exprl THEN . operations
    (34) operations -> . operations NEWLINE operation
    (35) operations -> . operation
    (36) operation -> . IN
    (37) operation -> . PRINT
    (38) operation -> . atrib
    (39) operation -> . exprl
    (40) operation -> . expr
    (41) operation -> . if_ifnot
    (42) operation -> . decl
    (43) operation -> . if_then
    (44) operation -> . for
    (3) IN -> . Input LP ID RP
    (4) PRINT -> . Write LP TEXTO RP
    (2) atrib -> . ID IGUAL expr
    (21) atrib -> . PRE indecl PRD ID IGUAL expr
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP
    (45) if_ifnot -> . IF exprl THEN operations ELSE operations
    (8) decl -> . ID IGUAL INT NINTdec
    (11) decl -> . ID IGUAL LISTA list_nint
    (46) if_then -> . IF exprl THEN operations
    (47) for -> . FOR exprl DO operations

    Input           shift and go to state 13
    Write           shift and go to state 16
    ID              shift and go to state 15
    PRE             shift and go to state 17
    NINT            shift and go to state 18
    LP              shift and go to state 14
    IF              shift and go to state 19
    FOR             shift and go to state 20

    exprl                          shift and go to state 7
    operations                     shift and go to state 82
    operation                      shift and go to state 3
    IN                             shift and go to state 4
    PRINT                          shift and go to state 5
    atrib                          shift and go to state 6
    expr                           shift and go to state 8
    if_ifnot                       shift and go to state 9
    decl                           shift and go to state 10
    if_then                        shift and go to state 11
    for                            shift and go to state 12

state 70

    (47) for -> FOR exprl DO . operations
    (34) operations -> . operations NEWLINE operation
    (35) operations -> . operation
    (36) operation -> . IN
    (37) operation -> . PRINT
    (38) operation -> . atrib
    (39) operation -> . exprl
    (40) operation -> . expr
    (41) operation -> . if_ifnot
    (42) operation -> . decl
    (43) operation -> . if_then
    (44) operation -> . for
    (3) IN -> . Input LP ID RP
    (4) PRINT -> . Write LP TEXTO RP
    (2) atrib -> . ID IGUAL expr
    (21) atrib -> . PRE indecl PRD ID IGUAL expr
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP
    (45) if_ifnot -> . IF exprl THEN operations ELSE operations
    (8) decl -> . ID IGUAL INT NINTdec
    (11) decl -> . ID IGUAL LISTA list_nint
    (46) if_then -> . IF exprl THEN operations
    (47) for -> . FOR exprl DO operations

    Input           shift and go to state 13
    Write           shift and go to state 16
    ID              shift and go to state 15
    PRE             shift and go to state 17
    NINT            shift and go to state 18
    LP              shift and go to state 14
    IF              shift and go to state 19
    FOR             shift and go to state 20

    exprl                          shift and go to state 7
    operations                     shift and go to state 83
    operation                      shift and go to state 3
    IN                             shift and go to state 4
    PRINT                          shift and go to state 5
    atrib                          shift and go to state 6
    expr                           shift and go to state 8
    if_ifnot                       shift and go to state 9
    decl                           shift and go to state 10
    if_then                        shift and go to state 11
    for                            shift and go to state 12

state 71

    (3) IN -> Input LP ID RP .

    NEWLINE         reduce using rule 3 (IN -> Input LP ID RP .)
    $end            reduce using rule 3 (IN -> Input LP ID RP .)
    ELSE            reduce using rule 3 (IN -> Input LP ID RP .)


state 72

    (20) expr -> PRE indecl PRD . ID

    ID              shift and go to state 84


state 73

    (8) decl -> ID IGUAL INT NINTdec .

    NEWLINE         reduce using rule 8 (decl -> ID IGUAL INT NINTdec .)
    $end            reduce using rule 8 (decl -> ID IGUAL INT NINTdec .)
    ELSE            reduce using rule 8 (decl -> ID IGUAL INT NINTdec .)


state 74

    (9) NINTdec -> NINT .

    NEWLINE         reduce using rule 9 (NINTdec -> NINT .)
    $end            reduce using rule 9 (NINTdec -> NINT .)
    ELSE            reduce using rule 9 (NINTdec -> NINT .)


state 75

    (11) decl -> ID IGUAL LISTA list_nint .
    (13) list_nint -> list_nint . VIRG NINT

    NEWLINE         reduce using rule 11 (decl -> ID IGUAL LISTA list_nint .)
    $end            reduce using rule 11 (decl -> ID IGUAL LISTA list_nint .)
    ELSE            reduce using rule 11 (decl -> ID IGUAL LISTA list_nint .)
    VIRG            shift and go to state 85


state 76

    (12) list_nint -> NINT .

    VIRG            reduce using rule 12 (list_nint -> NINT .)
    NEWLINE         reduce using rule 12 (list_nint -> NINT .)
    $end            reduce using rule 12 (list_nint -> NINT .)
    ELSE            reduce using rule 12 (list_nint -> NINT .)


state 77

    (4) PRINT -> Write LP TEXTO RP .

    NEWLINE         reduce using rule 4 (PRINT -> Write LP TEXTO RP .)
    $end            reduce using rule 4 (PRINT -> Write LP TEXTO RP .)
    ELSE            reduce using rule 4 (PRINT -> Write LP TEXTO RP .)


state 78

    (6) TEXTO -> PRE ind . PRD ID

    PRD             shift and go to state 86


state 79

    (24) ind -> ID .

    PRD             reduce using rule 24 (ind -> ID .)


state 80

    (23) ind -> NINT .

    PRD             reduce using rule 23 (ind -> NINT .)


state 81

    (21) atrib -> PRE indecl PRD ID . IGUAL expr
    (20) expr -> PRE indecl PRD ID .

    IGUAL           shift and go to state 87
    BIG             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    SMALL           reduce using rule 20 (expr -> PRE indecl PRD ID .)
    BIGEQ           reduce using rule 20 (expr -> PRE indecl PRD ID .)
    SMALLEQ         reduce using rule 20 (expr -> PRE indecl PRD ID .)
    EQ              reduce using rule 20 (expr -> PRE indecl PRD ID .)
    PLUS            reduce using rule 20 (expr -> PRE indecl PRD ID .)
    MINUS           reduce using rule 20 (expr -> PRE indecl PRD ID .)
    MUL             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    DIV             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    MOD             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    NEWLINE         reduce using rule 20 (expr -> PRE indecl PRD ID .)
    $end            reduce using rule 20 (expr -> PRE indecl PRD ID .)
    ELSE            reduce using rule 20 (expr -> PRE indecl PRD ID .)


state 82

    (45) if_ifnot -> IF exprl THEN operations . ELSE operations
    (46) if_then -> IF exprl THEN operations .
    (34) operations -> operations . NEWLINE operation

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    ELSE            shift and go to state 88
    $end            reduce using rule 46 (if_then -> IF exprl THEN operations .)
    NEWLINE         shift and go to state 21

  ! NEWLINE         [ reduce using rule 46 (if_then -> IF exprl THEN operations .) ]
  ! ELSE            [ reduce using rule 46 (if_then -> IF exprl THEN operations .) ]


state 83

    (47) for -> FOR exprl DO operations .
    (34) operations -> operations . NEWLINE operation

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 47 (for -> FOR exprl DO operations .)
    ELSE            reduce using rule 47 (for -> FOR exprl DO operations .)
    NEWLINE         shift and go to state 21

  ! NEWLINE         [ reduce using rule 47 (for -> FOR exprl DO operations .) ]


state 84

    (20) expr -> PRE indecl PRD ID .

    RP              reduce using rule 20 (expr -> PRE indecl PRD ID .)
    PLUS            reduce using rule 20 (expr -> PRE indecl PRD ID .)
    MINUS           reduce using rule 20 (expr -> PRE indecl PRD ID .)
    MUL             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    DIV             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    MOD             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    BIG             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    SMALL           reduce using rule 20 (expr -> PRE indecl PRD ID .)
    BIGEQ           reduce using rule 20 (expr -> PRE indecl PRD ID .)
    SMALLEQ         reduce using rule 20 (expr -> PRE indecl PRD ID .)
    EQ              reduce using rule 20 (expr -> PRE indecl PRD ID .)
    AND             reduce using rule 20 (expr -> PRE indecl PRD ID .)
    OR              reduce using rule 20 (expr -> PRE indecl PRD ID .)
    NEWLINE         reduce using rule 20 (expr -> PRE indecl PRD ID .)
    $end            reduce using rule 20 (expr -> PRE indecl PRD ID .)
    THEN            reduce using rule 20 (expr -> PRE indecl PRD ID .)
    DO              reduce using rule 20 (expr -> PRE indecl PRD ID .)
    ELSE            reduce using rule 20 (expr -> PRE indecl PRD ID .)


state 85

    (13) list_nint -> list_nint VIRG . NINT

    NINT            shift and go to state 89


state 86

    (6) TEXTO -> PRE ind PRD . ID

    ID              shift and go to state 90


state 87

    (21) atrib -> PRE indecl PRD ID IGUAL . expr
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP

    NINT            shift and go to state 18
    PRE             shift and go to state 36
    ID              shift and go to state 37
    LP              shift and go to state 14

    expr                           shift and go to state 91

state 88

    (45) if_ifnot -> IF exprl THEN operations ELSE . operations
    (34) operations -> . operations NEWLINE operation
    (35) operations -> . operation
    (36) operation -> . IN
    (37) operation -> . PRINT
    (38) operation -> . atrib
    (39) operation -> . exprl
    (40) operation -> . expr
    (41) operation -> . if_ifnot
    (42) operation -> . decl
    (43) operation -> . if_then
    (44) operation -> . for
    (3) IN -> . Input LP ID RP
    (4) PRINT -> . Write LP TEXTO RP
    (2) atrib -> . ID IGUAL expr
    (21) atrib -> . PRE indecl PRD ID IGUAL expr
    (27) exprl -> . expr BIG expr
    (28) exprl -> . expr SMALL expr
    (29) exprl -> . expr BIGEQ expr
    (30) exprl -> . expr SMALLEQ expr
    (31) exprl -> . expr EQ expr
    (32) exprl -> . exprl AND exprl
    (33) exprl -> . exprl OR exprl
    (14) expr -> . expr PLUS expr
    (15) expr -> . expr MINUS expr
    (16) expr -> . expr MUL expr
    (17) expr -> . expr DIV expr
    (18) expr -> . expr MOD expr
    (19) expr -> . NINT
    (20) expr -> . PRE indecl PRD ID
    (25) expr -> . ID
    (26) expr -> . LP expr RP
    (45) if_ifnot -> . IF exprl THEN operations ELSE operations
    (8) decl -> . ID IGUAL INT NINTdec
    (11) decl -> . ID IGUAL LISTA list_nint
    (46) if_then -> . IF exprl THEN operations
    (47) for -> . FOR exprl DO operations

    Input           shift and go to state 13
    Write           shift and go to state 16
    ID              shift and go to state 15
    PRE             shift and go to state 17
    NINT            shift and go to state 18
    LP              shift and go to state 14
    IF              shift and go to state 19
    FOR             shift and go to state 20

    exprl                          shift and go to state 7
    operations                     shift and go to state 92
    operation                      shift and go to state 3
    IN                             shift and go to state 4
    PRINT                          shift and go to state 5
    atrib                          shift and go to state 6
    expr                           shift and go to state 8
    if_ifnot                       shift and go to state 9
    decl                           shift and go to state 10
    if_then                        shift and go to state 11
    for                            shift and go to state 12

state 89

    (13) list_nint -> list_nint VIRG NINT .

    VIRG            reduce using rule 13 (list_nint -> list_nint VIRG NINT .)
    NEWLINE         reduce using rule 13 (list_nint -> list_nint VIRG NINT .)
    $end            reduce using rule 13 (list_nint -> list_nint VIRG NINT .)
    ELSE            reduce using rule 13 (list_nint -> list_nint VIRG NINT .)


state 90

    (6) TEXTO -> PRE ind PRD ID .

    RP              reduce using rule 6 (TEXTO -> PRE ind PRD ID .)


state 91

    (21) atrib -> PRE indecl PRD ID IGUAL expr .
    (14) expr -> expr . PLUS expr
    (15) expr -> expr . MINUS expr
    (16) expr -> expr . MUL expr
    (17) expr -> expr . DIV expr
    (18) expr -> expr . MOD expr

    NEWLINE         reduce using rule 21 (atrib -> PRE indecl PRD ID IGUAL expr .)
    $end            reduce using rule 21 (atrib -> PRE indecl PRD ID IGUAL expr .)
    ELSE            reduce using rule 21 (atrib -> PRE indecl PRD ID IGUAL expr .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32
    MOD             shift and go to state 33


state 92

    (45) if_ifnot -> IF exprl THEN operations ELSE operations .
    (34) operations -> operations . NEWLINE operation

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 45 (if_ifnot -> IF exprl THEN operations ELSE operations .)
    ELSE            reduce using rule 45 (if_ifnot -> IF exprl THEN operations ELSE operations .)
    NEWLINE         shift and go to state 21

  ! NEWLINE         [ reduce using rule 45 (if_ifnot -> IF exprl THEN operations ELSE operations .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 47 resolved as shift
WARNING: shift/reduce conflict for OR in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MUL in state 54 resolved as shift
WARNING: shift/reduce conflict for DIV in state 54 resolved as shift
WARNING: shift/reduce conflict for MOD in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MUL in state 57 resolved as shift
WARNING: shift/reduce conflict for DIV in state 57 resolved as shift
WARNING: shift/reduce conflict for MOD in state 57 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 82 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 82 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 83 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 92 resolved as shift
