Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LISTA

Grammar

Rule 0     S' -> start
Rule 1     start -> expr
Rule 2     start -> exprl
Rule 3     start -> operation
Rule 4     start -> if_then
Rule 5     start -> if_ifnot
Rule 6     start -> while
Rule 7     start -> for
Rule 8     start -> decl
Rule 9     decl -> ID IGUAL INT NINT
Rule 10    expr -> expr PLUS expr
Rule 11    expr -> expr MINUS expr
Rule 12    expr -> expr MUL expr
Rule 13    expr -> expr DIV expr
Rule 14    expr -> MINUS expr
Rule 15    expr -> NINT
Rule 16    exprl -> expr BIG expr
Rule 17    exprl -> expr SMALL expr
Rule 18    exprl -> expr BIGEQ expr
Rule 19    exprl -> expr SMALLEQ expr
Rule 20    exprl -> expr EQ expr
Rule 21    exprl -> exprl AND exprl
Rule 22    exprl -> exprl OR exprl
Rule 23    operation -> exprl
Rule 24    operation -> expr
Rule 25    operation -> NINT
Rule 26    operations -> operation NEWLINE operations
Rule 27    operations -> operation
Rule 28    if_ifnot -> IF exprl THEN operations ELSE operations
Rule 29    if_then -> IF exprl THEN operations
Rule 30    while -> WHILE exprl DO operations
Rule 31    for -> FOR exprl DO operations
Rule 32    list_nint -> NINT
Rule 33    list_nint -> NINT VIRG list_nint

Terminals, with rules where they appear

AND                  : 21
BIG                  : 16
BIGEQ                : 18
DIV                  : 13
DO                   : 30 31
ELSE                 : 28
EQ                   : 20
FOR                  : 31
ID                   : 9
IF                   : 28 29
IGUAL                : 9
INT                  : 9
LISTA                : 
MINUS                : 11 14
MUL                  : 12
NEWLINE              : 26
NINT                 : 9 15 25 32 33
OR                   : 22
PLUS                 : 10
SMALL                : 17
SMALLEQ              : 19
THEN                 : 28 29
VIRG                 : 33
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

decl                 : 8
expr                 : 1 10 10 11 11 12 12 13 13 14 16 16 17 17 18 18 19 19 20 20 24
exprl                : 2 21 21 22 22 23 28 29 30 31
for                  : 7
if_ifnot             : 5
if_then              : 4
list_nint            : 33
operation            : 3 26 27
operations           : 26 28 28 29 30 31
start                : 0
while                : 6

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . expr
    (2) start -> . exprl
    (3) start -> . operation
    (4) start -> . if_then
    (5) start -> . if_ifnot
    (6) start -> . while
    (7) start -> . for
    (8) start -> . decl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (29) if_then -> . IF exprl THEN operations
    (28) if_ifnot -> . IF exprl THEN operations ELSE operations
    (30) while -> . WHILE exprl DO operations
    (31) for -> . FOR exprl DO operations
    (9) decl -> . ID IGUAL INT NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    ID              shift and go to state 15

    start                          shift and go to state 1
    expr                           shift and go to state 2
    exprl                          shift and go to state 3
    operation                      shift and go to state 4
    if_then                        shift and go to state 5
    if_ifnot                       shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    decl                           shift and go to state 9

state 1

    (0) S' -> start .



state 2

    (1) start -> expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr
    (16) exprl -> expr . BIG expr
    (17) exprl -> expr . SMALL expr
    (18) exprl -> expr . BIGEQ expr
    (19) exprl -> expr . SMALLEQ expr
    (20) exprl -> expr . EQ expr
    (24) operation -> expr .

  ! reduce/reduce conflict for $end resolved using rule 1 (start -> expr .)
    $end            reduce using rule 1 (start -> expr .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MUL             shift and go to state 18
    DIV             shift and go to state 19
    BIG             shift and go to state 20
    SMALL           shift and go to state 21
    BIGEQ           shift and go to state 22
    SMALLEQ         shift and go to state 23
    EQ              shift and go to state 24

  ! $end            [ reduce using rule 24 (operation -> expr .) ]


state 3

    (2) start -> exprl .
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl
    (23) operation -> exprl .

  ! reduce/reduce conflict for $end resolved using rule 2 (start -> exprl .)
    $end            reduce using rule 2 (start -> exprl .)
    AND             shift and go to state 25
    OR              shift and go to state 26

  ! $end            [ reduce using rule 23 (operation -> exprl .) ]


state 4

    (3) start -> operation .

    $end            reduce using rule 3 (start -> operation .)


state 5

    (4) start -> if_then .

    $end            reduce using rule 4 (start -> if_then .)


state 6

    (5) start -> if_ifnot .

    $end            reduce using rule 5 (start -> if_ifnot .)


state 7

    (6) start -> while .

    $end            reduce using rule 6 (start -> while .)


state 8

    (7) start -> for .

    $end            reduce using rule 7 (start -> for .)


state 9

    (8) start -> decl .

    $end            reduce using rule 8 (start -> decl .)


state 10

    (14) expr -> MINUS . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 27

state 11

    (15) expr -> NINT .
    (25) operation -> NINT .

  ! reduce/reduce conflict for $end resolved using rule 15 (expr -> NINT .)
    PLUS            reduce using rule 15 (expr -> NINT .)
    MINUS           reduce using rule 15 (expr -> NINT .)
    MUL             reduce using rule 15 (expr -> NINT .)
    DIV             reduce using rule 15 (expr -> NINT .)
    BIG             reduce using rule 15 (expr -> NINT .)
    SMALL           reduce using rule 15 (expr -> NINT .)
    BIGEQ           reduce using rule 15 (expr -> NINT .)
    SMALLEQ         reduce using rule 15 (expr -> NINT .)
    EQ              reduce using rule 15 (expr -> NINT .)
    $end            reduce using rule 15 (expr -> NINT .)

  ! $end            [ reduce using rule 25 (operation -> NINT .) ]


state 12

    (29) if_then -> IF . exprl THEN operations
    (28) if_ifnot -> IF . exprl THEN operations ELSE operations
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    exprl                          shift and go to state 29
    expr                           shift and go to state 30

state 13

    (30) while -> WHILE . exprl DO operations
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    exprl                          shift and go to state 31
    expr                           shift and go to state 30

state 14

    (31) for -> FOR . exprl DO operations
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    exprl                          shift and go to state 32
    expr                           shift and go to state 30

state 15

    (9) decl -> ID . IGUAL INT NINT

    IGUAL           shift and go to state 33


state 16

    (10) expr -> expr PLUS . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 34

state 17

    (11) expr -> expr MINUS . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 35

state 18

    (12) expr -> expr MUL . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 36

state 19

    (13) expr -> expr DIV . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 37

state 20

    (16) exprl -> expr BIG . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 38

state 21

    (17) exprl -> expr SMALL . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 39

state 22

    (18) exprl -> expr BIGEQ . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 40

state 23

    (19) exprl -> expr SMALLEQ . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 41

state 24

    (20) exprl -> expr EQ . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    expr                           shift and go to state 42

state 25

    (21) exprl -> exprl AND . exprl
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    exprl                          shift and go to state 43
    expr                           shift and go to state 30

state 26

    (22) exprl -> exprl OR . exprl
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 10
    NINT            shift and go to state 28

    exprl                          shift and go to state 44
    expr                           shift and go to state 30

state 27

    (14) expr -> MINUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 14 (expr -> MINUS expr .)
    MINUS           reduce using rule 14 (expr -> MINUS expr .)
    MUL             reduce using rule 14 (expr -> MINUS expr .)
    DIV             reduce using rule 14 (expr -> MINUS expr .)
    BIG             reduce using rule 14 (expr -> MINUS expr .)
    SMALL           reduce using rule 14 (expr -> MINUS expr .)
    BIGEQ           reduce using rule 14 (expr -> MINUS expr .)
    SMALLEQ         reduce using rule 14 (expr -> MINUS expr .)
    EQ              reduce using rule 14 (expr -> MINUS expr .)
    $end            reduce using rule 14 (expr -> MINUS expr .)
    AND             reduce using rule 14 (expr -> MINUS expr .)
    OR              reduce using rule 14 (expr -> MINUS expr .)
    THEN            reduce using rule 14 (expr -> MINUS expr .)
    DO              reduce using rule 14 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 14 (expr -> MINUS expr .)
    ELSE            reduce using rule 14 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]
  ! MUL             [ shift and go to state 18 ]
  ! DIV             [ shift and go to state 19 ]


state 28

    (15) expr -> NINT .

    PLUS            reduce using rule 15 (expr -> NINT .)
    MINUS           reduce using rule 15 (expr -> NINT .)
    MUL             reduce using rule 15 (expr -> NINT .)
    DIV             reduce using rule 15 (expr -> NINT .)
    BIG             reduce using rule 15 (expr -> NINT .)
    SMALL           reduce using rule 15 (expr -> NINT .)
    BIGEQ           reduce using rule 15 (expr -> NINT .)
    SMALLEQ         reduce using rule 15 (expr -> NINT .)
    EQ              reduce using rule 15 (expr -> NINT .)
    $end            reduce using rule 15 (expr -> NINT .)
    AND             reduce using rule 15 (expr -> NINT .)
    OR              reduce using rule 15 (expr -> NINT .)
    THEN            reduce using rule 15 (expr -> NINT .)
    DO              reduce using rule 15 (expr -> NINT .)
    NEWLINE         reduce using rule 15 (expr -> NINT .)
    ELSE            reduce using rule 15 (expr -> NINT .)


state 29

    (29) if_then -> IF exprl . THEN operations
    (28) if_ifnot -> IF exprl . THEN operations ELSE operations
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    THEN            shift and go to state 45
    AND             shift and go to state 25
    OR              shift and go to state 26


state 30

    (16) exprl -> expr . BIG expr
    (17) exprl -> expr . SMALL expr
    (18) exprl -> expr . BIGEQ expr
    (19) exprl -> expr . SMALLEQ expr
    (20) exprl -> expr . EQ expr
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    BIG             shift and go to state 20
    SMALL           shift and go to state 21
    BIGEQ           shift and go to state 22
    SMALLEQ         shift and go to state 23
    EQ              shift and go to state 24
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MUL             shift and go to state 18
    DIV             shift and go to state 19


state 31

    (30) while -> WHILE exprl . DO operations
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    DO              shift and go to state 46
    AND             shift and go to state 25
    OR              shift and go to state 26


state 32

    (31) for -> FOR exprl . DO operations
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    DO              shift and go to state 47
    AND             shift and go to state 25
    OR              shift and go to state 26


state 33

    (9) decl -> ID IGUAL . INT NINT

    INT             shift and go to state 48


state 34

    (10) expr -> expr PLUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 10 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 10 (expr -> expr PLUS expr .)
    BIG             reduce using rule 10 (expr -> expr PLUS expr .)
    SMALL           reduce using rule 10 (expr -> expr PLUS expr .)
    BIGEQ           reduce using rule 10 (expr -> expr PLUS expr .)
    SMALLEQ         reduce using rule 10 (expr -> expr PLUS expr .)
    EQ              reduce using rule 10 (expr -> expr PLUS expr .)
    $end            reduce using rule 10 (expr -> expr PLUS expr .)
    AND             reduce using rule 10 (expr -> expr PLUS expr .)
    OR              reduce using rule 10 (expr -> expr PLUS expr .)
    THEN            reduce using rule 10 (expr -> expr PLUS expr .)
    DO              reduce using rule 10 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 10 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 10 (expr -> expr PLUS expr .)
    MUL             shift and go to state 18
    DIV             shift and go to state 19

  ! MUL             [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]


state 35

    (11) expr -> expr MINUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 11 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 11 (expr -> expr MINUS expr .)
    BIG             reduce using rule 11 (expr -> expr MINUS expr .)
    SMALL           reduce using rule 11 (expr -> expr MINUS expr .)
    BIGEQ           reduce using rule 11 (expr -> expr MINUS expr .)
    SMALLEQ         reduce using rule 11 (expr -> expr MINUS expr .)
    EQ              reduce using rule 11 (expr -> expr MINUS expr .)
    $end            reduce using rule 11 (expr -> expr MINUS expr .)
    AND             reduce using rule 11 (expr -> expr MINUS expr .)
    OR              reduce using rule 11 (expr -> expr MINUS expr .)
    THEN            reduce using rule 11 (expr -> expr MINUS expr .)
    DO              reduce using rule 11 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 11 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 11 (expr -> expr MINUS expr .)
    MUL             shift and go to state 18
    DIV             shift and go to state 19

  ! MUL             [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]


state 36

    (12) expr -> expr MUL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 12 (expr -> expr MUL expr .)
    MINUS           reduce using rule 12 (expr -> expr MUL expr .)
    MUL             reduce using rule 12 (expr -> expr MUL expr .)
    DIV             reduce using rule 12 (expr -> expr MUL expr .)
    BIG             reduce using rule 12 (expr -> expr MUL expr .)
    SMALL           reduce using rule 12 (expr -> expr MUL expr .)
    BIGEQ           reduce using rule 12 (expr -> expr MUL expr .)
    SMALLEQ         reduce using rule 12 (expr -> expr MUL expr .)
    EQ              reduce using rule 12 (expr -> expr MUL expr .)
    $end            reduce using rule 12 (expr -> expr MUL expr .)
    AND             reduce using rule 12 (expr -> expr MUL expr .)
    OR              reduce using rule 12 (expr -> expr MUL expr .)
    THEN            reduce using rule 12 (expr -> expr MUL expr .)
    DO              reduce using rule 12 (expr -> expr MUL expr .)
    NEWLINE         reduce using rule 12 (expr -> expr MUL expr .)
    ELSE            reduce using rule 12 (expr -> expr MUL expr .)

  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]
  ! MUL             [ shift and go to state 18 ]
  ! DIV             [ shift and go to state 19 ]


state 37

    (13) expr -> expr DIV expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 13 (expr -> expr DIV expr .)
    MINUS           reduce using rule 13 (expr -> expr DIV expr .)
    MUL             reduce using rule 13 (expr -> expr DIV expr .)
    DIV             reduce using rule 13 (expr -> expr DIV expr .)
    BIG             reduce using rule 13 (expr -> expr DIV expr .)
    SMALL           reduce using rule 13 (expr -> expr DIV expr .)
    BIGEQ           reduce using rule 13 (expr -> expr DIV expr .)
    SMALLEQ         reduce using rule 13 (expr -> expr DIV expr .)
    EQ              reduce using rule 13 (expr -> expr DIV expr .)
    $end            reduce using rule 13 (expr -> expr DIV expr .)
    AND             reduce using rule 13 (expr -> expr DIV expr .)
    OR              reduce using rule 13 (expr -> expr DIV expr .)
    THEN            reduce using rule 13 (expr -> expr DIV expr .)
    DO              reduce using rule 13 (expr -> expr DIV expr .)
    NEWLINE         reduce using rule 13 (expr -> expr DIV expr .)
    ELSE            reduce using rule 13 (expr -> expr DIV expr .)

  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]
  ! MUL             [ shift and go to state 18 ]
  ! DIV             [ shift and go to state 19 ]


state 38

    (16) exprl -> expr BIG expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 16 (exprl -> expr BIG expr .)
    OR              reduce using rule 16 (exprl -> expr BIG expr .)
    $end            reduce using rule 16 (exprl -> expr BIG expr .)
    THEN            reduce using rule 16 (exprl -> expr BIG expr .)
    DO              reduce using rule 16 (exprl -> expr BIG expr .)
    NEWLINE         reduce using rule 16 (exprl -> expr BIG expr .)
    ELSE            reduce using rule 16 (exprl -> expr BIG expr .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MUL             shift and go to state 18
    DIV             shift and go to state 19


state 39

    (17) exprl -> expr SMALL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 17 (exprl -> expr SMALL expr .)
    OR              reduce using rule 17 (exprl -> expr SMALL expr .)
    $end            reduce using rule 17 (exprl -> expr SMALL expr .)
    THEN            reduce using rule 17 (exprl -> expr SMALL expr .)
    DO              reduce using rule 17 (exprl -> expr SMALL expr .)
    NEWLINE         reduce using rule 17 (exprl -> expr SMALL expr .)
    ELSE            reduce using rule 17 (exprl -> expr SMALL expr .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MUL             shift and go to state 18
    DIV             shift and go to state 19


state 40

    (18) exprl -> expr BIGEQ expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 18 (exprl -> expr BIGEQ expr .)
    OR              reduce using rule 18 (exprl -> expr BIGEQ expr .)
    $end            reduce using rule 18 (exprl -> expr BIGEQ expr .)
    THEN            reduce using rule 18 (exprl -> expr BIGEQ expr .)
    DO              reduce using rule 18 (exprl -> expr BIGEQ expr .)
    NEWLINE         reduce using rule 18 (exprl -> expr BIGEQ expr .)
    ELSE            reduce using rule 18 (exprl -> expr BIGEQ expr .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MUL             shift and go to state 18
    DIV             shift and go to state 19


state 41

    (19) exprl -> expr SMALLEQ expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    OR              reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    $end            reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    THEN            reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    DO              reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    NEWLINE         reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    ELSE            reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MUL             shift and go to state 18
    DIV             shift and go to state 19


state 42

    (20) exprl -> expr EQ expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 20 (exprl -> expr EQ expr .)
    OR              reduce using rule 20 (exprl -> expr EQ expr .)
    $end            reduce using rule 20 (exprl -> expr EQ expr .)
    THEN            reduce using rule 20 (exprl -> expr EQ expr .)
    DO              reduce using rule 20 (exprl -> expr EQ expr .)
    NEWLINE         reduce using rule 20 (exprl -> expr EQ expr .)
    ELSE            reduce using rule 20 (exprl -> expr EQ expr .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MUL             shift and go to state 18
    DIV             shift and go to state 19


state 43

    (21) exprl -> exprl AND exprl .
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 21 (exprl -> exprl AND exprl .)
    THEN            reduce using rule 21 (exprl -> exprl AND exprl .)
    DO              reduce using rule 21 (exprl -> exprl AND exprl .)
    NEWLINE         reduce using rule 21 (exprl -> exprl AND exprl .)
    ELSE            reduce using rule 21 (exprl -> exprl AND exprl .)
    AND             shift and go to state 25
    OR              shift and go to state 26

  ! AND             [ reduce using rule 21 (exprl -> exprl AND exprl .) ]
  ! OR              [ reduce using rule 21 (exprl -> exprl AND exprl .) ]


state 44

    (22) exprl -> exprl OR exprl .
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 22 (exprl -> exprl OR exprl .)
    THEN            reduce using rule 22 (exprl -> exprl OR exprl .)
    DO              reduce using rule 22 (exprl -> exprl OR exprl .)
    NEWLINE         reduce using rule 22 (exprl -> exprl OR exprl .)
    ELSE            reduce using rule 22 (exprl -> exprl OR exprl .)
    AND             shift and go to state 25
    OR              shift and go to state 26

  ! AND             [ reduce using rule 22 (exprl -> exprl OR exprl .) ]
  ! OR              [ reduce using rule 22 (exprl -> exprl OR exprl .) ]


state 45

    (29) if_then -> IF exprl THEN . operations
    (28) if_ifnot -> IF exprl THEN . operations ELSE operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 53
    MINUS           shift and go to state 10

    exprl                          shift and go to state 49
    operations                     shift and go to state 50
    operation                      shift and go to state 51
    expr                           shift and go to state 52

state 46

    (30) while -> WHILE exprl DO . operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 53
    MINUS           shift and go to state 10

    exprl                          shift and go to state 49
    operations                     shift and go to state 54
    operation                      shift and go to state 51
    expr                           shift and go to state 52

state 47

    (31) for -> FOR exprl DO . operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 53
    MINUS           shift and go to state 10

    exprl                          shift and go to state 49
    operations                     shift and go to state 55
    operation                      shift and go to state 51
    expr                           shift and go to state 52

state 48

    (9) decl -> ID IGUAL INT . NINT

    NINT            shift and go to state 56


state 49

    (23) operation -> exprl .
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    NEWLINE         reduce using rule 23 (operation -> exprl .)
    ELSE            reduce using rule 23 (operation -> exprl .)
    $end            reduce using rule 23 (operation -> exprl .)
    AND             shift and go to state 25
    OR              shift and go to state 26


state 50

    (29) if_then -> IF exprl THEN operations .
    (28) if_ifnot -> IF exprl THEN operations . ELSE operations

    $end            reduce using rule 29 (if_then -> IF exprl THEN operations .)
    ELSE            shift and go to state 57


state 51

    (26) operations -> operation . NEWLINE operations
    (27) operations -> operation .

    NEWLINE         shift and go to state 58
    ELSE            reduce using rule 27 (operations -> operation .)
    $end            reduce using rule 27 (operations -> operation .)


state 52

    (24) operation -> expr .
    (16) exprl -> expr . BIG expr
    (17) exprl -> expr . SMALL expr
    (18) exprl -> expr . BIGEQ expr
    (19) exprl -> expr . SMALLEQ expr
    (20) exprl -> expr . EQ expr
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    NEWLINE         reduce using rule 24 (operation -> expr .)
    ELSE            reduce using rule 24 (operation -> expr .)
    $end            reduce using rule 24 (operation -> expr .)
    BIG             shift and go to state 20
    SMALL           shift and go to state 21
    BIGEQ           shift and go to state 22
    SMALLEQ         shift and go to state 23
    EQ              shift and go to state 24
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MUL             shift and go to state 18
    DIV             shift and go to state 19


state 53

    (25) operation -> NINT .
    (15) expr -> NINT .

  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (expr -> NINT .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (expr -> NINT .)
  ! reduce/reduce conflict for $end resolved using rule 15 (expr -> NINT .)
    BIG             reduce using rule 15 (expr -> NINT .)
    SMALL           reduce using rule 15 (expr -> NINT .)
    BIGEQ           reduce using rule 15 (expr -> NINT .)
    SMALLEQ         reduce using rule 15 (expr -> NINT .)
    EQ              reduce using rule 15 (expr -> NINT .)
    PLUS            reduce using rule 15 (expr -> NINT .)
    MINUS           reduce using rule 15 (expr -> NINT .)
    MUL             reduce using rule 15 (expr -> NINT .)
    DIV             reduce using rule 15 (expr -> NINT .)
    NEWLINE         reduce using rule 15 (expr -> NINT .)
    ELSE            reduce using rule 15 (expr -> NINT .)
    $end            reduce using rule 15 (expr -> NINT .)

  ! NEWLINE         [ reduce using rule 25 (operation -> NINT .) ]
  ! ELSE            [ reduce using rule 25 (operation -> NINT .) ]
  ! $end            [ reduce using rule 25 (operation -> NINT .) ]


state 54

    (30) while -> WHILE exprl DO operations .

    $end            reduce using rule 30 (while -> WHILE exprl DO operations .)


state 55

    (31) for -> FOR exprl DO operations .

    $end            reduce using rule 31 (for -> FOR exprl DO operations .)


state 56

    (9) decl -> ID IGUAL INT NINT .

    $end            reduce using rule 9 (decl -> ID IGUAL INT NINT .)


state 57

    (28) if_ifnot -> IF exprl THEN operations ELSE . operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 53
    MINUS           shift and go to state 10

    exprl                          shift and go to state 49
    operations                     shift and go to state 59
    operation                      shift and go to state 51
    expr                           shift and go to state 52

state 58

    (26) operations -> operation NEWLINE . operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 53
    MINUS           shift and go to state 10

    operation                      shift and go to state 51
    operations                     shift and go to state 60
    exprl                          shift and go to state 49
    expr                           shift and go to state 52

state 59

    (28) if_ifnot -> IF exprl THEN operations ELSE operations .

    $end            reduce using rule 28 (if_ifnot -> IF exprl THEN operations ELSE operations .)


state 60

    (26) operations -> operation NEWLINE operations .

    ELSE            reduce using rule 26 (operations -> operation NEWLINE operations .)
    $end            reduce using rule 26 (operations -> operation NEWLINE operations .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 43 resolved as shift
WARNING: shift/reduce conflict for OR in state 43 resolved as shift
WARNING: shift/reduce conflict for AND in state 44 resolved as shift
WARNING: shift/reduce conflict for OR in state 44 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (start -> expr)
WARNING: rejected rule (operation -> expr) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (start -> exprl)
WARNING: rejected rule (operation -> exprl) in state 3
WARNING: reduce/reduce conflict in state 11 resolved using rule (expr -> NINT)
WARNING: rejected rule (operation -> NINT) in state 11
WARNING: reduce/reduce conflict in state 53 resolved using rule (expr -> NINT)
WARNING: rejected rule (operation -> NINT) in state 53
WARNING: Rule (operation -> NINT) is never reduced
