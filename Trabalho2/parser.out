Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> expr
Rule 2     start -> exprl
Rule 3     start -> if_then
Rule 4     start -> if_ifnot
Rule 5     start -> while
Rule 6     start -> for
Rule 7     start -> decl
Rule 8     decl -> ID IGUAL INT NINT
Rule 9     decl -> ID IGUAL LISTA list_nint
Rule 10    expr -> expr PLUS expr
Rule 11    expr -> expr MINUS expr
Rule 12    expr -> expr MUL expr
Rule 13    expr -> expr DIV expr
Rule 14    expr -> MINUS expr
Rule 15    expr -> NINT
Rule 16    exprl -> expr BIG expr
Rule 17    exprl -> expr SMALL expr
Rule 18    exprl -> expr BIGEQ expr
Rule 19    exprl -> expr SMALLEQ expr
Rule 20    exprl -> expr EQ expr
Rule 21    exprl -> exprl AND exprl
Rule 22    exprl -> exprl OR exprl
Rule 23    operation -> exprl
Rule 24    operation -> expr
Rule 25    operation -> NINT
Rule 26    operations -> operation NEWLINE operations
Rule 27    operations -> operation
Rule 28    if_ifnot -> IF exprl THEN operations ELSE operations
Rule 29    if_then -> IF exprl THEN operations
Rule 30    while -> WHILE exprl DO operations
Rule 31    for -> FOR exprl DO operations
Rule 32    list_nint -> NINT
Rule 33    list_nint -> NINT VIRG list_nint

Terminals, with rules where they appear

AND                  : 21
BIG                  : 16
BIGEQ                : 18
DIV                  : 13
DO                   : 30 31
ELSE                 : 28
EQ                   : 20
FOR                  : 31
ID                   : 8 9
IF                   : 28 29
IGUAL                : 8 9
INT                  : 8
LISTA                : 9
MINUS                : 11 14
MUL                  : 12
NEWLINE              : 26
NINT                 : 8 15 25 32 33
OR                   : 22
PLUS                 : 10
SMALL                : 17
SMALLEQ              : 19
THEN                 : 28 29
VIRG                 : 33
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

decl                 : 7
expr                 : 1 10 10 11 11 12 12 13 13 14 16 16 17 17 18 18 19 19 20 20 24
exprl                : 2 21 21 22 22 23 28 29 30 31
for                  : 6
if_ifnot             : 4
if_then              : 3
list_nint            : 9 33
operation            : 26 27
operations           : 26 28 28 29 30 31
start                : 0
while                : 5

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . expr
    (2) start -> . exprl
    (3) start -> . if_then
    (4) start -> . if_ifnot
    (5) start -> . while
    (6) start -> . for
    (7) start -> . decl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (29) if_then -> . IF exprl THEN operations
    (28) if_ifnot -> . IF exprl THEN operations ELSE operations
    (30) while -> . WHILE exprl DO operations
    (31) for -> . FOR exprl DO operations
    (8) decl -> . ID IGUAL INT NINT
    (9) decl -> . ID IGUAL LISTA list_nint

    MINUS           shift and go to state 9
    NINT            shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    ID              shift and go to state 14

    start                          shift and go to state 1
    expr                           shift and go to state 2
    exprl                          shift and go to state 3
    if_then                        shift and go to state 4
    if_ifnot                       shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    decl                           shift and go to state 8

state 1

    (0) S' -> start .



state 2

    (1) start -> expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr
    (16) exprl -> expr . BIG expr
    (17) exprl -> expr . SMALL expr
    (18) exprl -> expr . BIGEQ expr
    (19) exprl -> expr . SMALLEQ expr
    (20) exprl -> expr . EQ expr

    $end            reduce using rule 1 (start -> expr .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18
    BIG             shift and go to state 19
    SMALL           shift and go to state 20
    BIGEQ           shift and go to state 21
    SMALLEQ         shift and go to state 22
    EQ              shift and go to state 23


state 3

    (2) start -> exprl .
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    $end            reduce using rule 2 (start -> exprl .)
    AND             shift and go to state 24
    OR              shift and go to state 25


state 4

    (3) start -> if_then .

    $end            reduce using rule 3 (start -> if_then .)


state 5

    (4) start -> if_ifnot .

    $end            reduce using rule 4 (start -> if_ifnot .)


state 6

    (5) start -> while .

    $end            reduce using rule 5 (start -> while .)


state 7

    (6) start -> for .

    $end            reduce using rule 6 (start -> for .)


state 8

    (7) start -> decl .

    $end            reduce using rule 7 (start -> decl .)


state 9

    (14) expr -> MINUS . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 26

state 10

    (15) expr -> NINT .

    PLUS            reduce using rule 15 (expr -> NINT .)
    MINUS           reduce using rule 15 (expr -> NINT .)
    MUL             reduce using rule 15 (expr -> NINT .)
    DIV             reduce using rule 15 (expr -> NINT .)
    BIG             reduce using rule 15 (expr -> NINT .)
    SMALL           reduce using rule 15 (expr -> NINT .)
    BIGEQ           reduce using rule 15 (expr -> NINT .)
    SMALLEQ         reduce using rule 15 (expr -> NINT .)
    EQ              reduce using rule 15 (expr -> NINT .)
    $end            reduce using rule 15 (expr -> NINT .)
    AND             reduce using rule 15 (expr -> NINT .)
    OR              reduce using rule 15 (expr -> NINT .)
    THEN            reduce using rule 15 (expr -> NINT .)
    DO              reduce using rule 15 (expr -> NINT .)
    NEWLINE         reduce using rule 15 (expr -> NINT .)
    ELSE            reduce using rule 15 (expr -> NINT .)


state 11

    (29) if_then -> IF . exprl THEN operations
    (28) if_ifnot -> IF . exprl THEN operations ELSE operations
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    exprl                          shift and go to state 27
    expr                           shift and go to state 28

state 12

    (30) while -> WHILE . exprl DO operations
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    exprl                          shift and go to state 29
    expr                           shift and go to state 28

state 13

    (31) for -> FOR . exprl DO operations
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    exprl                          shift and go to state 30
    expr                           shift and go to state 28

state 14

    (8) decl -> ID . IGUAL INT NINT
    (9) decl -> ID . IGUAL LISTA list_nint

    IGUAL           shift and go to state 31


state 15

    (10) expr -> expr PLUS . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 32

state 16

    (11) expr -> expr MINUS . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 33

state 17

    (12) expr -> expr MUL . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 34

state 18

    (13) expr -> expr DIV . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 35

state 19

    (16) exprl -> expr BIG . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 36

state 20

    (17) exprl -> expr SMALL . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 37

state 21

    (18) exprl -> expr BIGEQ . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 38

state 22

    (19) exprl -> expr SMALLEQ . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 39

state 23

    (20) exprl -> expr EQ . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    expr                           shift and go to state 40

state 24

    (21) exprl -> exprl AND . exprl
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    exprl                          shift and go to state 41
    expr                           shift and go to state 28

state 25

    (22) exprl -> exprl OR . exprl
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    MINUS           shift and go to state 9
    NINT            shift and go to state 10

    exprl                          shift and go to state 42
    expr                           shift and go to state 28

state 26

    (14) expr -> MINUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 14 (expr -> MINUS expr .)
    MINUS           reduce using rule 14 (expr -> MINUS expr .)
    MUL             reduce using rule 14 (expr -> MINUS expr .)
    DIV             reduce using rule 14 (expr -> MINUS expr .)
    BIG             reduce using rule 14 (expr -> MINUS expr .)
    SMALL           reduce using rule 14 (expr -> MINUS expr .)
    BIGEQ           reduce using rule 14 (expr -> MINUS expr .)
    SMALLEQ         reduce using rule 14 (expr -> MINUS expr .)
    EQ              reduce using rule 14 (expr -> MINUS expr .)
    $end            reduce using rule 14 (expr -> MINUS expr .)
    AND             reduce using rule 14 (expr -> MINUS expr .)
    OR              reduce using rule 14 (expr -> MINUS expr .)
    THEN            reduce using rule 14 (expr -> MINUS expr .)
    DO              reduce using rule 14 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 14 (expr -> MINUS expr .)
    ELSE            reduce using rule 14 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MUL             [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]


state 27

    (29) if_then -> IF exprl . THEN operations
    (28) if_ifnot -> IF exprl . THEN operations ELSE operations
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    THEN            shift and go to state 43
    AND             shift and go to state 24
    OR              shift and go to state 25


state 28

    (16) exprl -> expr . BIG expr
    (17) exprl -> expr . SMALL expr
    (18) exprl -> expr . BIGEQ expr
    (19) exprl -> expr . SMALLEQ expr
    (20) exprl -> expr . EQ expr
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    BIG             shift and go to state 19
    SMALL           shift and go to state 20
    BIGEQ           shift and go to state 21
    SMALLEQ         shift and go to state 22
    EQ              shift and go to state 23
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 29

    (30) while -> WHILE exprl . DO operations
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    DO              shift and go to state 44
    AND             shift and go to state 24
    OR              shift and go to state 25


state 30

    (31) for -> FOR exprl . DO operations
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    DO              shift and go to state 45
    AND             shift and go to state 24
    OR              shift and go to state 25


state 31

    (8) decl -> ID IGUAL . INT NINT
    (9) decl -> ID IGUAL . LISTA list_nint

    INT             shift and go to state 46
    LISTA           shift and go to state 47


state 32

    (10) expr -> expr PLUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 10 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 10 (expr -> expr PLUS expr .)
    BIG             reduce using rule 10 (expr -> expr PLUS expr .)
    SMALL           reduce using rule 10 (expr -> expr PLUS expr .)
    BIGEQ           reduce using rule 10 (expr -> expr PLUS expr .)
    SMALLEQ         reduce using rule 10 (expr -> expr PLUS expr .)
    EQ              reduce using rule 10 (expr -> expr PLUS expr .)
    $end            reduce using rule 10 (expr -> expr PLUS expr .)
    AND             reduce using rule 10 (expr -> expr PLUS expr .)
    OR              reduce using rule 10 (expr -> expr PLUS expr .)
    THEN            reduce using rule 10 (expr -> expr PLUS expr .)
    DO              reduce using rule 10 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 10 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 10 (expr -> expr PLUS expr .)
    MUL             shift and go to state 17
    DIV             shift and go to state 18

  ! MUL             [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 33

    (11) expr -> expr MINUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 11 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 11 (expr -> expr MINUS expr .)
    BIG             reduce using rule 11 (expr -> expr MINUS expr .)
    SMALL           reduce using rule 11 (expr -> expr MINUS expr .)
    BIGEQ           reduce using rule 11 (expr -> expr MINUS expr .)
    SMALLEQ         reduce using rule 11 (expr -> expr MINUS expr .)
    EQ              reduce using rule 11 (expr -> expr MINUS expr .)
    $end            reduce using rule 11 (expr -> expr MINUS expr .)
    AND             reduce using rule 11 (expr -> expr MINUS expr .)
    OR              reduce using rule 11 (expr -> expr MINUS expr .)
    THEN            reduce using rule 11 (expr -> expr MINUS expr .)
    DO              reduce using rule 11 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 11 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 11 (expr -> expr MINUS expr .)
    MUL             shift and go to state 17
    DIV             shift and go to state 18

  ! MUL             [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 34

    (12) expr -> expr MUL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 12 (expr -> expr MUL expr .)
    MINUS           reduce using rule 12 (expr -> expr MUL expr .)
    MUL             reduce using rule 12 (expr -> expr MUL expr .)
    DIV             reduce using rule 12 (expr -> expr MUL expr .)
    BIG             reduce using rule 12 (expr -> expr MUL expr .)
    SMALL           reduce using rule 12 (expr -> expr MUL expr .)
    BIGEQ           reduce using rule 12 (expr -> expr MUL expr .)
    SMALLEQ         reduce using rule 12 (expr -> expr MUL expr .)
    EQ              reduce using rule 12 (expr -> expr MUL expr .)
    $end            reduce using rule 12 (expr -> expr MUL expr .)
    AND             reduce using rule 12 (expr -> expr MUL expr .)
    OR              reduce using rule 12 (expr -> expr MUL expr .)
    THEN            reduce using rule 12 (expr -> expr MUL expr .)
    DO              reduce using rule 12 (expr -> expr MUL expr .)
    NEWLINE         reduce using rule 12 (expr -> expr MUL expr .)
    ELSE            reduce using rule 12 (expr -> expr MUL expr .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MUL             [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]


state 35

    (13) expr -> expr DIV expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    PLUS            reduce using rule 13 (expr -> expr DIV expr .)
    MINUS           reduce using rule 13 (expr -> expr DIV expr .)
    MUL             reduce using rule 13 (expr -> expr DIV expr .)
    DIV             reduce using rule 13 (expr -> expr DIV expr .)
    BIG             reduce using rule 13 (expr -> expr DIV expr .)
    SMALL           reduce using rule 13 (expr -> expr DIV expr .)
    BIGEQ           reduce using rule 13 (expr -> expr DIV expr .)
    SMALLEQ         reduce using rule 13 (expr -> expr DIV expr .)
    EQ              reduce using rule 13 (expr -> expr DIV expr .)
    $end            reduce using rule 13 (expr -> expr DIV expr .)
    AND             reduce using rule 13 (expr -> expr DIV expr .)
    OR              reduce using rule 13 (expr -> expr DIV expr .)
    THEN            reduce using rule 13 (expr -> expr DIV expr .)
    DO              reduce using rule 13 (expr -> expr DIV expr .)
    NEWLINE         reduce using rule 13 (expr -> expr DIV expr .)
    ELSE            reduce using rule 13 (expr -> expr DIV expr .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MUL             [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]


state 36

    (16) exprl -> expr BIG expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 16 (exprl -> expr BIG expr .)
    OR              reduce using rule 16 (exprl -> expr BIG expr .)
    $end            reduce using rule 16 (exprl -> expr BIG expr .)
    THEN            reduce using rule 16 (exprl -> expr BIG expr .)
    DO              reduce using rule 16 (exprl -> expr BIG expr .)
    NEWLINE         reduce using rule 16 (exprl -> expr BIG expr .)
    ELSE            reduce using rule 16 (exprl -> expr BIG expr .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 37

    (17) exprl -> expr SMALL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 17 (exprl -> expr SMALL expr .)
    OR              reduce using rule 17 (exprl -> expr SMALL expr .)
    $end            reduce using rule 17 (exprl -> expr SMALL expr .)
    THEN            reduce using rule 17 (exprl -> expr SMALL expr .)
    DO              reduce using rule 17 (exprl -> expr SMALL expr .)
    NEWLINE         reduce using rule 17 (exprl -> expr SMALL expr .)
    ELSE            reduce using rule 17 (exprl -> expr SMALL expr .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 38

    (18) exprl -> expr BIGEQ expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 18 (exprl -> expr BIGEQ expr .)
    OR              reduce using rule 18 (exprl -> expr BIGEQ expr .)
    $end            reduce using rule 18 (exprl -> expr BIGEQ expr .)
    THEN            reduce using rule 18 (exprl -> expr BIGEQ expr .)
    DO              reduce using rule 18 (exprl -> expr BIGEQ expr .)
    NEWLINE         reduce using rule 18 (exprl -> expr BIGEQ expr .)
    ELSE            reduce using rule 18 (exprl -> expr BIGEQ expr .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 39

    (19) exprl -> expr SMALLEQ expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    OR              reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    $end            reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    THEN            reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    DO              reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    NEWLINE         reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    ELSE            reduce using rule 19 (exprl -> expr SMALLEQ expr .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 40

    (20) exprl -> expr EQ expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    AND             reduce using rule 20 (exprl -> expr EQ expr .)
    OR              reduce using rule 20 (exprl -> expr EQ expr .)
    $end            reduce using rule 20 (exprl -> expr EQ expr .)
    THEN            reduce using rule 20 (exprl -> expr EQ expr .)
    DO              reduce using rule 20 (exprl -> expr EQ expr .)
    NEWLINE         reduce using rule 20 (exprl -> expr EQ expr .)
    ELSE            reduce using rule 20 (exprl -> expr EQ expr .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 41

    (21) exprl -> exprl AND exprl .
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 21 (exprl -> exprl AND exprl .)
    THEN            reduce using rule 21 (exprl -> exprl AND exprl .)
    DO              reduce using rule 21 (exprl -> exprl AND exprl .)
    NEWLINE         reduce using rule 21 (exprl -> exprl AND exprl .)
    ELSE            reduce using rule 21 (exprl -> exprl AND exprl .)
    AND             shift and go to state 24
    OR              shift and go to state 25

  ! AND             [ reduce using rule 21 (exprl -> exprl AND exprl .) ]
  ! OR              [ reduce using rule 21 (exprl -> exprl AND exprl .) ]


state 42

    (22) exprl -> exprl OR exprl .
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 22 (exprl -> exprl OR exprl .)
    THEN            reduce using rule 22 (exprl -> exprl OR exprl .)
    DO              reduce using rule 22 (exprl -> exprl OR exprl .)
    NEWLINE         reduce using rule 22 (exprl -> exprl OR exprl .)
    ELSE            reduce using rule 22 (exprl -> exprl OR exprl .)
    AND             shift and go to state 24
    OR              shift and go to state 25

  ! AND             [ reduce using rule 22 (exprl -> exprl OR exprl .) ]
  ! OR              [ reduce using rule 22 (exprl -> exprl OR exprl .) ]


state 43

    (29) if_then -> IF exprl THEN . operations
    (28) if_ifnot -> IF exprl THEN . operations ELSE operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 52
    MINUS           shift and go to state 9

    exprl                          shift and go to state 48
    operations                     shift and go to state 49
    operation                      shift and go to state 50
    expr                           shift and go to state 51

state 44

    (30) while -> WHILE exprl DO . operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 52
    MINUS           shift and go to state 9

    exprl                          shift and go to state 48
    operations                     shift and go to state 53
    operation                      shift and go to state 50
    expr                           shift and go to state 51

state 45

    (31) for -> FOR exprl DO . operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 52
    MINUS           shift and go to state 9

    exprl                          shift and go to state 48
    operations                     shift and go to state 54
    operation                      shift and go to state 50
    expr                           shift and go to state 51

state 46

    (8) decl -> ID IGUAL INT . NINT

    NINT            shift and go to state 55


state 47

    (9) decl -> ID IGUAL LISTA . list_nint
    (32) list_nint -> . NINT
    (33) list_nint -> . NINT VIRG list_nint

    NINT            shift and go to state 57

    list_nint                      shift and go to state 56

state 48

    (23) operation -> exprl .
    (21) exprl -> exprl . AND exprl
    (22) exprl -> exprl . OR exprl

    NEWLINE         reduce using rule 23 (operation -> exprl .)
    ELSE            reduce using rule 23 (operation -> exprl .)
    $end            reduce using rule 23 (operation -> exprl .)
    AND             shift and go to state 24
    OR              shift and go to state 25


state 49

    (29) if_then -> IF exprl THEN operations .
    (28) if_ifnot -> IF exprl THEN operations . ELSE operations

    $end            reduce using rule 29 (if_then -> IF exprl THEN operations .)
    ELSE            shift and go to state 58


state 50

    (26) operations -> operation . NEWLINE operations
    (27) operations -> operation .

    NEWLINE         shift and go to state 59
    ELSE            reduce using rule 27 (operations -> operation .)
    $end            reduce using rule 27 (operations -> operation .)


state 51

    (24) operation -> expr .
    (16) exprl -> expr . BIG expr
    (17) exprl -> expr . SMALL expr
    (18) exprl -> expr . BIGEQ expr
    (19) exprl -> expr . SMALLEQ expr
    (20) exprl -> expr . EQ expr
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . MUL expr
    (13) expr -> expr . DIV expr

    NEWLINE         reduce using rule 24 (operation -> expr .)
    ELSE            reduce using rule 24 (operation -> expr .)
    $end            reduce using rule 24 (operation -> expr .)
    BIG             shift and go to state 19
    SMALL           shift and go to state 20
    BIGEQ           shift and go to state 21
    SMALLEQ         shift and go to state 22
    EQ              shift and go to state 23
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 52

    (25) operation -> NINT .
    (15) expr -> NINT .

  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (expr -> NINT .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (expr -> NINT .)
  ! reduce/reduce conflict for $end resolved using rule 15 (expr -> NINT .)
    BIG             reduce using rule 15 (expr -> NINT .)
    SMALL           reduce using rule 15 (expr -> NINT .)
    BIGEQ           reduce using rule 15 (expr -> NINT .)
    SMALLEQ         reduce using rule 15 (expr -> NINT .)
    EQ              reduce using rule 15 (expr -> NINT .)
    PLUS            reduce using rule 15 (expr -> NINT .)
    MINUS           reduce using rule 15 (expr -> NINT .)
    MUL             reduce using rule 15 (expr -> NINT .)
    DIV             reduce using rule 15 (expr -> NINT .)
    NEWLINE         reduce using rule 15 (expr -> NINT .)
    ELSE            reduce using rule 15 (expr -> NINT .)
    $end            reduce using rule 15 (expr -> NINT .)

  ! NEWLINE         [ reduce using rule 25 (operation -> NINT .) ]
  ! ELSE            [ reduce using rule 25 (operation -> NINT .) ]
  ! $end            [ reduce using rule 25 (operation -> NINT .) ]


state 53

    (30) while -> WHILE exprl DO operations .

    $end            reduce using rule 30 (while -> WHILE exprl DO operations .)


state 54

    (31) for -> FOR exprl DO operations .

    $end            reduce using rule 31 (for -> FOR exprl DO operations .)


state 55

    (8) decl -> ID IGUAL INT NINT .

    $end            reduce using rule 8 (decl -> ID IGUAL INT NINT .)


state 56

    (9) decl -> ID IGUAL LISTA list_nint .

    $end            reduce using rule 9 (decl -> ID IGUAL LISTA list_nint .)


state 57

    (32) list_nint -> NINT .
    (33) list_nint -> NINT . VIRG list_nint

    $end            reduce using rule 32 (list_nint -> NINT .)
    VIRG            shift and go to state 60


state 58

    (28) if_ifnot -> IF exprl THEN operations ELSE . operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 52
    MINUS           shift and go to state 9

    exprl                          shift and go to state 48
    operations                     shift and go to state 61
    operation                      shift and go to state 50
    expr                           shift and go to state 51

state 59

    (26) operations -> operation NEWLINE . operations
    (26) operations -> . operation NEWLINE operations
    (27) operations -> . operation
    (23) operation -> . exprl
    (24) operation -> . expr
    (25) operation -> . NINT
    (16) exprl -> . expr BIG expr
    (17) exprl -> . expr SMALL expr
    (18) exprl -> . expr BIGEQ expr
    (19) exprl -> . expr SMALLEQ expr
    (20) exprl -> . expr EQ expr
    (21) exprl -> . exprl AND exprl
    (22) exprl -> . exprl OR exprl
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr MUL expr
    (13) expr -> . expr DIV expr
    (14) expr -> . MINUS expr
    (15) expr -> . NINT

    NINT            shift and go to state 52
    MINUS           shift and go to state 9

    operation                      shift and go to state 50
    operations                     shift and go to state 62
    exprl                          shift and go to state 48
    expr                           shift and go to state 51

state 60

    (33) list_nint -> NINT VIRG . list_nint
    (32) list_nint -> . NINT
    (33) list_nint -> . NINT VIRG list_nint

    NINT            shift and go to state 57

    list_nint                      shift and go to state 63

state 61

    (28) if_ifnot -> IF exprl THEN operations ELSE operations .

    $end            reduce using rule 28 (if_ifnot -> IF exprl THEN operations ELSE operations .)


state 62

    (26) operations -> operation NEWLINE operations .

    ELSE            reduce using rule 26 (operations -> operation NEWLINE operations .)
    $end            reduce using rule 26 (operations -> operation NEWLINE operations .)


state 63

    (33) list_nint -> NINT VIRG list_nint .

    $end            reduce using rule 33 (list_nint -> NINT VIRG list_nint .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 41 resolved as shift
WARNING: shift/reduce conflict for OR in state 41 resolved as shift
WARNING: shift/reduce conflict for AND in state 42 resolved as shift
WARNING: shift/reduce conflict for OR in state 42 resolved as shift
WARNING: reduce/reduce conflict in state 52 resolved using rule (expr -> NINT)
WARNING: rejected rule (operation -> NINT) in state 52
WARNING: Rule (operation -> NINT) is never reduced
