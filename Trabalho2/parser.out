Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> expr
Rule 2     start -> exprl
Rule 3     start -> operation
Rule 4     start -> if_then
Rule 5     start -> if_ifnot
Rule 6     start -> while
Rule 7     start -> for
Rule 8     start -> list
Rule 9     start -> decl
Rule 10    decl -> ID IGUAL decl_type
Rule 11    decl_type -> LISTA
Rule 12    decl_type -> NINT
Rule 13    expr -> expr PLUS expr
Rule 14    expr -> expr MINUS expr
Rule 15    expr -> expr MUL expr
Rule 16    expr -> expr DIV expr
Rule 17    expr -> MINUS expr
Rule 18    expr -> INT
Rule 19    exprl -> expr BIG expr
Rule 20    exprl -> expr SMALL expr
Rule 21    exprl -> expr BIGEQ expr
Rule 22    exprl -> expr SMALLEQ expr
Rule 23    exprl -> expr EQ expr
Rule 24    exprl -> expr AND expr
Rule 25    exprl -> expr OR expr
Rule 26    operation -> exprl
Rule 27    operation -> expr
Rule 28    operation -> INT
Rule 29    operations -> operation NEWLINE operations
Rule 30    operations -> operation
Rule 31    if_ifnot -> IF exprl THEN operations ELSE operations
Rule 32    if_then -> IF exprl THEN operations
Rule 33    while -> WHILE exprl DO operations
Rule 34    for -> FOR exprl DO operations
Rule 35    list -> ID IGUAL LISTA list_nint
Rule 36    list_nint -> INT
Rule 37    list_nint -> INT VIRG list_nint

Terminals, with rules where they appear

AND                  : 24
BIG                  : 19
BIGEQ                : 21
DIV                  : 16
DO                   : 33 34
ELSE                 : 31
EQ                   : 23
FOR                  : 34
ID                   : 10 35
IF                   : 31 32
IGUAL                : 10 35
INT                  : 18 28 36 37
LISTA                : 11 35
MINUS                : 14 17
MUL                  : 15
NEWLINE              : 29
NINT                 : 12
OR                   : 25
PLUS                 : 13
SMALL                : 20
SMALLEQ              : 22
THEN                 : 31 32
VIRG                 : 37
WHILE                : 33
error                : 

Nonterminals, with rules where they appear

decl                 : 9
decl_type            : 10
expr                 : 1 13 13 14 14 15 15 16 16 17 19 19 20 20 21 21 22 22 23 23 24 24 25 25 27
exprl                : 2 26 31 32 33 34
for                  : 7
if_ifnot             : 5
if_then              : 4
list                 : 8
list_nint            : 35 37
operation            : 3 29 30
operations           : 29 31 31 32 33 34
start                : 0
while                : 6

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . expr
    (2) start -> . exprl
    (3) start -> . operation
    (4) start -> . if_then
    (5) start -> . if_ifnot
    (6) start -> . while
    (7) start -> . for
    (8) start -> . list
    (9) start -> . decl
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (26) operation -> . exprl
    (27) operation -> . expr
    (28) operation -> . INT
    (32) if_then -> . IF exprl THEN operations
    (31) if_ifnot -> . IF exprl THEN operations ELSE operations
    (33) while -> . WHILE exprl DO operations
    (34) for -> . FOR exprl DO operations
    (35) list -> . ID IGUAL LISTA list_nint
    (10) decl -> . ID IGUAL decl_type

    MINUS           shift and go to state 11
    INT             shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    ID              shift and go to state 16

    start                          shift and go to state 1
    expr                           shift and go to state 2
    exprl                          shift and go to state 3
    operation                      shift and go to state 4
    if_then                        shift and go to state 5
    if_ifnot                       shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    list                           shift and go to state 9
    decl                           shift and go to state 10

state 1

    (0) S' -> start .



state 2

    (1) start -> expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (19) exprl -> expr . BIG expr
    (20) exprl -> expr . SMALL expr
    (21) exprl -> expr . BIGEQ expr
    (22) exprl -> expr . SMALLEQ expr
    (23) exprl -> expr . EQ expr
    (24) exprl -> expr . AND expr
    (25) exprl -> expr . OR expr
    (27) operation -> expr .

  ! reduce/reduce conflict for $end resolved using rule 1 (start -> expr .)
    $end            reduce using rule 1 (start -> expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20
    BIG             shift and go to state 21
    SMALL           shift and go to state 22
    BIGEQ           shift and go to state 23
    SMALLEQ         shift and go to state 24
    EQ              shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27

  ! $end            [ reduce using rule 27 (operation -> expr .) ]


state 3

    (2) start -> exprl .
    (26) operation -> exprl .

  ! reduce/reduce conflict for $end resolved using rule 2 (start -> exprl .)
    $end            reduce using rule 2 (start -> exprl .)

  ! $end            [ reduce using rule 26 (operation -> exprl .) ]


state 4

    (3) start -> operation .

    $end            reduce using rule 3 (start -> operation .)


state 5

    (4) start -> if_then .

    $end            reduce using rule 4 (start -> if_then .)


state 6

    (5) start -> if_ifnot .

    $end            reduce using rule 5 (start -> if_ifnot .)


state 7

    (6) start -> while .

    $end            reduce using rule 6 (start -> while .)


state 8

    (7) start -> for .

    $end            reduce using rule 7 (start -> for .)


state 9

    (8) start -> list .

    $end            reduce using rule 8 (start -> list .)


state 10

    (9) start -> decl .

    $end            reduce using rule 9 (start -> decl .)


state 11

    (17) expr -> MINUS . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 28

state 12

    (18) expr -> INT .
    (28) operation -> INT .

  ! reduce/reduce conflict for $end resolved using rule 18 (expr -> INT .)
    PLUS            reduce using rule 18 (expr -> INT .)
    MINUS           reduce using rule 18 (expr -> INT .)
    MUL             reduce using rule 18 (expr -> INT .)
    DIV             reduce using rule 18 (expr -> INT .)
    BIG             reduce using rule 18 (expr -> INT .)
    SMALL           reduce using rule 18 (expr -> INT .)
    BIGEQ           reduce using rule 18 (expr -> INT .)
    SMALLEQ         reduce using rule 18 (expr -> INT .)
    EQ              reduce using rule 18 (expr -> INT .)
    AND             reduce using rule 18 (expr -> INT .)
    OR              reduce using rule 18 (expr -> INT .)
    $end            reduce using rule 18 (expr -> INT .)

  ! $end            [ reduce using rule 28 (operation -> INT .) ]


state 13

    (32) if_then -> IF . exprl THEN operations
    (31) if_ifnot -> IF . exprl THEN operations ELSE operations
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    exprl                          shift and go to state 30
    expr                           shift and go to state 31

state 14

    (33) while -> WHILE . exprl DO operations
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    exprl                          shift and go to state 32
    expr                           shift and go to state 31

state 15

    (34) for -> FOR . exprl DO operations
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    exprl                          shift and go to state 33
    expr                           shift and go to state 31

state 16

    (35) list -> ID . IGUAL LISTA list_nint
    (10) decl -> ID . IGUAL decl_type

    IGUAL           shift and go to state 34


state 17

    (13) expr -> expr PLUS . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 35

state 18

    (14) expr -> expr MINUS . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 36

state 19

    (15) expr -> expr MUL . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 37

state 20

    (16) expr -> expr DIV . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 38

state 21

    (19) exprl -> expr BIG . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 39

state 22

    (20) exprl -> expr SMALL . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 40

state 23

    (21) exprl -> expr BIGEQ . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 41

state 24

    (22) exprl -> expr SMALLEQ . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 42

state 25

    (23) exprl -> expr EQ . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 43

state 26

    (24) exprl -> expr AND . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 44

state 27

    (25) exprl -> expr OR . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    MINUS           shift and go to state 11
    INT             shift and go to state 29

    expr                           shift and go to state 45

state 28

    (17) expr -> MINUS expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    PLUS            reduce using rule 17 (expr -> MINUS expr .)
    MINUS           reduce using rule 17 (expr -> MINUS expr .)
    MUL             reduce using rule 17 (expr -> MINUS expr .)
    DIV             reduce using rule 17 (expr -> MINUS expr .)
    BIG             reduce using rule 17 (expr -> MINUS expr .)
    SMALL           reduce using rule 17 (expr -> MINUS expr .)
    BIGEQ           reduce using rule 17 (expr -> MINUS expr .)
    SMALLEQ         reduce using rule 17 (expr -> MINUS expr .)
    EQ              reduce using rule 17 (expr -> MINUS expr .)
    AND             reduce using rule 17 (expr -> MINUS expr .)
    OR              reduce using rule 17 (expr -> MINUS expr .)
    $end            reduce using rule 17 (expr -> MINUS expr .)
    THEN            reduce using rule 17 (expr -> MINUS expr .)
    DO              reduce using rule 17 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 17 (expr -> MINUS expr .)
    ELSE            reduce using rule 17 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MUL             [ shift and go to state 19 ]
  ! DIV             [ shift and go to state 20 ]


state 29

    (18) expr -> INT .

    PLUS            reduce using rule 18 (expr -> INT .)
    MINUS           reduce using rule 18 (expr -> INT .)
    MUL             reduce using rule 18 (expr -> INT .)
    DIV             reduce using rule 18 (expr -> INT .)
    BIG             reduce using rule 18 (expr -> INT .)
    SMALL           reduce using rule 18 (expr -> INT .)
    BIGEQ           reduce using rule 18 (expr -> INT .)
    SMALLEQ         reduce using rule 18 (expr -> INT .)
    EQ              reduce using rule 18 (expr -> INT .)
    AND             reduce using rule 18 (expr -> INT .)
    OR              reduce using rule 18 (expr -> INT .)
    $end            reduce using rule 18 (expr -> INT .)
    THEN            reduce using rule 18 (expr -> INT .)
    DO              reduce using rule 18 (expr -> INT .)
    NEWLINE         reduce using rule 18 (expr -> INT .)
    ELSE            reduce using rule 18 (expr -> INT .)


state 30

    (32) if_then -> IF exprl . THEN operations
    (31) if_ifnot -> IF exprl . THEN operations ELSE operations

    THEN            shift and go to state 46


state 31

    (19) exprl -> expr . BIG expr
    (20) exprl -> expr . SMALL expr
    (21) exprl -> expr . BIGEQ expr
    (22) exprl -> expr . SMALLEQ expr
    (23) exprl -> expr . EQ expr
    (24) exprl -> expr . AND expr
    (25) exprl -> expr . OR expr
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    BIG             shift and go to state 21
    SMALL           shift and go to state 22
    BIGEQ           shift and go to state 23
    SMALLEQ         shift and go to state 24
    EQ              shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 32

    (33) while -> WHILE exprl . DO operations

    DO              shift and go to state 47


state 33

    (34) for -> FOR exprl . DO operations

    DO              shift and go to state 48


state 34

    (35) list -> ID IGUAL . LISTA list_nint
    (10) decl -> ID IGUAL . decl_type
    (11) decl_type -> . LISTA
    (12) decl_type -> . NINT

    LISTA           shift and go to state 49
    NINT            shift and go to state 51

    decl_type                      shift and go to state 50

state 35

    (13) expr -> expr PLUS expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    PLUS            reduce using rule 13 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 13 (expr -> expr PLUS expr .)
    BIG             reduce using rule 13 (expr -> expr PLUS expr .)
    SMALL           reduce using rule 13 (expr -> expr PLUS expr .)
    BIGEQ           reduce using rule 13 (expr -> expr PLUS expr .)
    SMALLEQ         reduce using rule 13 (expr -> expr PLUS expr .)
    EQ              reduce using rule 13 (expr -> expr PLUS expr .)
    AND             reduce using rule 13 (expr -> expr PLUS expr .)
    OR              reduce using rule 13 (expr -> expr PLUS expr .)
    $end            reduce using rule 13 (expr -> expr PLUS expr .)
    THEN            reduce using rule 13 (expr -> expr PLUS expr .)
    DO              reduce using rule 13 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 13 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 13 (expr -> expr PLUS expr .)
    MUL             shift and go to state 19
    DIV             shift and go to state 20

  ! MUL             [ reduce using rule 13 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 13 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]


state 36

    (14) expr -> expr MINUS expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    PLUS            reduce using rule 14 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 14 (expr -> expr MINUS expr .)
    BIG             reduce using rule 14 (expr -> expr MINUS expr .)
    SMALL           reduce using rule 14 (expr -> expr MINUS expr .)
    BIGEQ           reduce using rule 14 (expr -> expr MINUS expr .)
    SMALLEQ         reduce using rule 14 (expr -> expr MINUS expr .)
    EQ              reduce using rule 14 (expr -> expr MINUS expr .)
    AND             reduce using rule 14 (expr -> expr MINUS expr .)
    OR              reduce using rule 14 (expr -> expr MINUS expr .)
    $end            reduce using rule 14 (expr -> expr MINUS expr .)
    THEN            reduce using rule 14 (expr -> expr MINUS expr .)
    DO              reduce using rule 14 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 14 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 14 (expr -> expr MINUS expr .)
    MUL             shift and go to state 19
    DIV             shift and go to state 20

  ! MUL             [ reduce using rule 14 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 14 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]


state 37

    (15) expr -> expr MUL expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    PLUS            reduce using rule 15 (expr -> expr MUL expr .)
    MINUS           reduce using rule 15 (expr -> expr MUL expr .)
    MUL             reduce using rule 15 (expr -> expr MUL expr .)
    DIV             reduce using rule 15 (expr -> expr MUL expr .)
    BIG             reduce using rule 15 (expr -> expr MUL expr .)
    SMALL           reduce using rule 15 (expr -> expr MUL expr .)
    BIGEQ           reduce using rule 15 (expr -> expr MUL expr .)
    SMALLEQ         reduce using rule 15 (expr -> expr MUL expr .)
    EQ              reduce using rule 15 (expr -> expr MUL expr .)
    AND             reduce using rule 15 (expr -> expr MUL expr .)
    OR              reduce using rule 15 (expr -> expr MUL expr .)
    $end            reduce using rule 15 (expr -> expr MUL expr .)
    THEN            reduce using rule 15 (expr -> expr MUL expr .)
    DO              reduce using rule 15 (expr -> expr MUL expr .)
    NEWLINE         reduce using rule 15 (expr -> expr MUL expr .)
    ELSE            reduce using rule 15 (expr -> expr MUL expr .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MUL             [ shift and go to state 19 ]
  ! DIV             [ shift and go to state 20 ]


state 38

    (16) expr -> expr DIV expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    PLUS            reduce using rule 16 (expr -> expr DIV expr .)
    MINUS           reduce using rule 16 (expr -> expr DIV expr .)
    MUL             reduce using rule 16 (expr -> expr DIV expr .)
    DIV             reduce using rule 16 (expr -> expr DIV expr .)
    BIG             reduce using rule 16 (expr -> expr DIV expr .)
    SMALL           reduce using rule 16 (expr -> expr DIV expr .)
    BIGEQ           reduce using rule 16 (expr -> expr DIV expr .)
    SMALLEQ         reduce using rule 16 (expr -> expr DIV expr .)
    EQ              reduce using rule 16 (expr -> expr DIV expr .)
    AND             reduce using rule 16 (expr -> expr DIV expr .)
    OR              reduce using rule 16 (expr -> expr DIV expr .)
    $end            reduce using rule 16 (expr -> expr DIV expr .)
    THEN            reduce using rule 16 (expr -> expr DIV expr .)
    DO              reduce using rule 16 (expr -> expr DIV expr .)
    NEWLINE         reduce using rule 16 (expr -> expr DIV expr .)
    ELSE            reduce using rule 16 (expr -> expr DIV expr .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! MUL             [ shift and go to state 19 ]
  ! DIV             [ shift and go to state 20 ]


state 39

    (19) exprl -> expr BIG expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    $end            reduce using rule 19 (exprl -> expr BIG expr .)
    THEN            reduce using rule 19 (exprl -> expr BIG expr .)
    DO              reduce using rule 19 (exprl -> expr BIG expr .)
    NEWLINE         reduce using rule 19 (exprl -> expr BIG expr .)
    ELSE            reduce using rule 19 (exprl -> expr BIG expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 40

    (20) exprl -> expr SMALL expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    $end            reduce using rule 20 (exprl -> expr SMALL expr .)
    THEN            reduce using rule 20 (exprl -> expr SMALL expr .)
    DO              reduce using rule 20 (exprl -> expr SMALL expr .)
    NEWLINE         reduce using rule 20 (exprl -> expr SMALL expr .)
    ELSE            reduce using rule 20 (exprl -> expr SMALL expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 41

    (21) exprl -> expr BIGEQ expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    $end            reduce using rule 21 (exprl -> expr BIGEQ expr .)
    THEN            reduce using rule 21 (exprl -> expr BIGEQ expr .)
    DO              reduce using rule 21 (exprl -> expr BIGEQ expr .)
    NEWLINE         reduce using rule 21 (exprl -> expr BIGEQ expr .)
    ELSE            reduce using rule 21 (exprl -> expr BIGEQ expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 42

    (22) exprl -> expr SMALLEQ expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    $end            reduce using rule 22 (exprl -> expr SMALLEQ expr .)
    THEN            reduce using rule 22 (exprl -> expr SMALLEQ expr .)
    DO              reduce using rule 22 (exprl -> expr SMALLEQ expr .)
    NEWLINE         reduce using rule 22 (exprl -> expr SMALLEQ expr .)
    ELSE            reduce using rule 22 (exprl -> expr SMALLEQ expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 43

    (23) exprl -> expr EQ expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    $end            reduce using rule 23 (exprl -> expr EQ expr .)
    THEN            reduce using rule 23 (exprl -> expr EQ expr .)
    DO              reduce using rule 23 (exprl -> expr EQ expr .)
    NEWLINE         reduce using rule 23 (exprl -> expr EQ expr .)
    ELSE            reduce using rule 23 (exprl -> expr EQ expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 44

    (24) exprl -> expr AND expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    $end            reduce using rule 24 (exprl -> expr AND expr .)
    THEN            reduce using rule 24 (exprl -> expr AND expr .)
    DO              reduce using rule 24 (exprl -> expr AND expr .)
    NEWLINE         reduce using rule 24 (exprl -> expr AND expr .)
    ELSE            reduce using rule 24 (exprl -> expr AND expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 45

    (25) exprl -> expr OR expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    $end            reduce using rule 25 (exprl -> expr OR expr .)
    THEN            reduce using rule 25 (exprl -> expr OR expr .)
    DO              reduce using rule 25 (exprl -> expr OR expr .)
    NEWLINE         reduce using rule 25 (exprl -> expr OR expr .)
    ELSE            reduce using rule 25 (exprl -> expr OR expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 46

    (32) if_then -> IF exprl THEN . operations
    (31) if_ifnot -> IF exprl THEN . operations ELSE operations
    (29) operations -> . operation NEWLINE operations
    (30) operations -> . operation
    (26) operation -> . exprl
    (27) operation -> . expr
    (28) operation -> . INT
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    INT             shift and go to state 56
    MINUS           shift and go to state 11

    exprl                          shift and go to state 52
    operations                     shift and go to state 53
    operation                      shift and go to state 54
    expr                           shift and go to state 55

state 47

    (33) while -> WHILE exprl DO . operations
    (29) operations -> . operation NEWLINE operations
    (30) operations -> . operation
    (26) operation -> . exprl
    (27) operation -> . expr
    (28) operation -> . INT
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    INT             shift and go to state 56
    MINUS           shift and go to state 11

    exprl                          shift and go to state 52
    operations                     shift and go to state 57
    operation                      shift and go to state 54
    expr                           shift and go to state 55

state 48

    (34) for -> FOR exprl DO . operations
    (29) operations -> . operation NEWLINE operations
    (30) operations -> . operation
    (26) operation -> . exprl
    (27) operation -> . expr
    (28) operation -> . INT
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    INT             shift and go to state 56
    MINUS           shift and go to state 11

    exprl                          shift and go to state 52
    operations                     shift and go to state 58
    operation                      shift and go to state 54
    expr                           shift and go to state 55

state 49

    (35) list -> ID IGUAL LISTA . list_nint
    (11) decl_type -> LISTA .
    (36) list_nint -> . INT
    (37) list_nint -> . INT VIRG list_nint

    $end            reduce using rule 11 (decl_type -> LISTA .)
    INT             shift and go to state 60

    list_nint                      shift and go to state 59

state 50

    (10) decl -> ID IGUAL decl_type .

    $end            reduce using rule 10 (decl -> ID IGUAL decl_type .)


state 51

    (12) decl_type -> NINT .

    $end            reduce using rule 12 (decl_type -> NINT .)


state 52

    (26) operation -> exprl .

    NEWLINE         reduce using rule 26 (operation -> exprl .)
    ELSE            reduce using rule 26 (operation -> exprl .)
    $end            reduce using rule 26 (operation -> exprl .)


state 53

    (32) if_then -> IF exprl THEN operations .
    (31) if_ifnot -> IF exprl THEN operations . ELSE operations

    $end            reduce using rule 32 (if_then -> IF exprl THEN operations .)
    ELSE            shift and go to state 61


state 54

    (29) operations -> operation . NEWLINE operations
    (30) operations -> operation .

    NEWLINE         shift and go to state 62
    ELSE            reduce using rule 30 (operations -> operation .)
    $end            reduce using rule 30 (operations -> operation .)


state 55

    (27) operation -> expr .
    (19) exprl -> expr . BIG expr
    (20) exprl -> expr . SMALL expr
    (21) exprl -> expr . BIGEQ expr
    (22) exprl -> expr . SMALLEQ expr
    (23) exprl -> expr . EQ expr
    (24) exprl -> expr . AND expr
    (25) exprl -> expr . OR expr
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr

    NEWLINE         reduce using rule 27 (operation -> expr .)
    ELSE            reduce using rule 27 (operation -> expr .)
    $end            reduce using rule 27 (operation -> expr .)
    BIG             shift and go to state 21
    SMALL           shift and go to state 22
    BIGEQ           shift and go to state 23
    SMALLEQ         shift and go to state 24
    EQ              shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    MUL             shift and go to state 19
    DIV             shift and go to state 20


state 56

    (28) operation -> INT .
    (18) expr -> INT .

  ! reduce/reduce conflict for NEWLINE resolved using rule 18 (expr -> INT .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (expr -> INT .)
  ! reduce/reduce conflict for $end resolved using rule 18 (expr -> INT .)
    BIG             reduce using rule 18 (expr -> INT .)
    SMALL           reduce using rule 18 (expr -> INT .)
    BIGEQ           reduce using rule 18 (expr -> INT .)
    SMALLEQ         reduce using rule 18 (expr -> INT .)
    EQ              reduce using rule 18 (expr -> INT .)
    AND             reduce using rule 18 (expr -> INT .)
    OR              reduce using rule 18 (expr -> INT .)
    PLUS            reduce using rule 18 (expr -> INT .)
    MINUS           reduce using rule 18 (expr -> INT .)
    MUL             reduce using rule 18 (expr -> INT .)
    DIV             reduce using rule 18 (expr -> INT .)
    NEWLINE         reduce using rule 18 (expr -> INT .)
    ELSE            reduce using rule 18 (expr -> INT .)
    $end            reduce using rule 18 (expr -> INT .)

  ! NEWLINE         [ reduce using rule 28 (operation -> INT .) ]
  ! ELSE            [ reduce using rule 28 (operation -> INT .) ]
  ! $end            [ reduce using rule 28 (operation -> INT .) ]


state 57

    (33) while -> WHILE exprl DO operations .

    $end            reduce using rule 33 (while -> WHILE exprl DO operations .)


state 58

    (34) for -> FOR exprl DO operations .

    $end            reduce using rule 34 (for -> FOR exprl DO operations .)


state 59

    (35) list -> ID IGUAL LISTA list_nint .

    $end            reduce using rule 35 (list -> ID IGUAL LISTA list_nint .)


state 60

    (36) list_nint -> INT .
    (37) list_nint -> INT . VIRG list_nint

    $end            reduce using rule 36 (list_nint -> INT .)
    VIRG            shift and go to state 63


state 61

    (31) if_ifnot -> IF exprl THEN operations ELSE . operations
    (29) operations -> . operation NEWLINE operations
    (30) operations -> . operation
    (26) operation -> . exprl
    (27) operation -> . expr
    (28) operation -> . INT
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    INT             shift and go to state 56
    MINUS           shift and go to state 11

    exprl                          shift and go to state 52
    operations                     shift and go to state 64
    operation                      shift and go to state 54
    expr                           shift and go to state 55

state 62

    (29) operations -> operation NEWLINE . operations
    (29) operations -> . operation NEWLINE operations
    (30) operations -> . operation
    (26) operation -> . exprl
    (27) operation -> . expr
    (28) operation -> . INT
    (19) exprl -> . expr BIG expr
    (20) exprl -> . expr SMALL expr
    (21) exprl -> . expr BIGEQ expr
    (22) exprl -> . expr SMALLEQ expr
    (23) exprl -> . expr EQ expr
    (24) exprl -> . expr AND expr
    (25) exprl -> . expr OR expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . MINUS expr
    (18) expr -> . INT

    INT             shift and go to state 56
    MINUS           shift and go to state 11

    operation                      shift and go to state 54
    operations                     shift and go to state 65
    exprl                          shift and go to state 52
    expr                           shift and go to state 55

state 63

    (37) list_nint -> INT VIRG . list_nint
    (36) list_nint -> . INT
    (37) list_nint -> . INT VIRG list_nint

    INT             shift and go to state 60

    list_nint                      shift and go to state 66

state 64

    (31) if_ifnot -> IF exprl THEN operations ELSE operations .

    $end            reduce using rule 31 (if_ifnot -> IF exprl THEN operations ELSE operations .)


state 65

    (29) operations -> operation NEWLINE operations .

    ELSE            reduce using rule 29 (operations -> operation NEWLINE operations .)
    $end            reduce using rule 29 (operations -> operation NEWLINE operations .)


state 66

    (37) list_nint -> INT VIRG list_nint .

    $end            reduce using rule 37 (list_nint -> INT VIRG list_nint .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 2 resolved using rule (start -> expr)
WARNING: rejected rule (operation -> expr) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (start -> exprl)
WARNING: rejected rule (operation -> exprl) in state 3
WARNING: reduce/reduce conflict in state 12 resolved using rule (expr -> INT)
WARNING: rejected rule (operation -> INT) in state 12
WARNING: reduce/reduce conflict in state 56 resolved using rule (expr -> INT)
WARNING: rejected rule (operation -> INT) in state 56
WARNING: Rule (operation -> INT) is never reduced
